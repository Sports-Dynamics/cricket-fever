// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CricketGround is an object representing the database table.
type CricketGround struct {
	GroundID        int         `boil:"ground_id" json:"ground_id" toml:"ground_id" yaml:"ground_id"`
	GroundName      string      `boil:"ground_name" json:"ground_name" toml:"ground_name" yaml:"ground_name"`
	Location        null.String `boil:"location" json:"location,omitempty" toml:"location" yaml:"location,omitempty"`
	TeamCountry     null.String `boil:"team_country" json:"team_country,omitempty" toml:"team_country" yaml:"team_country,omitempty"`
	TeamState       null.String `boil:"team_state" json:"team_state,omitempty" toml:"team_state" yaml:"team_state,omitempty"`
	TeamCity        null.String `boil:"team_city" json:"team_city,omitempty" toml:"team_city" yaml:"team_city,omitempty"`
	Capacity        null.Int    `boil:"capacity" json:"capacity,omitempty" toml:"capacity" yaml:"capacity,omitempty"`
	EstablishedYear null.Int    `boil:"established_year" json:"established_year,omitempty" toml:"established_year" yaml:"established_year,omitempty"`
	ListedYear      null.Int    `boil:"listed_year" json:"listed_year,omitempty" toml:"listed_year" yaml:"listed_year,omitempty"`
	CreatedAt       null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt       null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *cricketGroundR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cricketGroundL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CricketGroundColumns = struct {
	GroundID        string
	GroundName      string
	Location        string
	TeamCountry     string
	TeamState       string
	TeamCity        string
	Capacity        string
	EstablishedYear string
	ListedYear      string
	CreatedAt       string
	UpdatedAt       string
}{
	GroundID:        "ground_id",
	GroundName:      "ground_name",
	Location:        "location",
	TeamCountry:     "team_country",
	TeamState:       "team_state",
	TeamCity:        "team_city",
	Capacity:        "capacity",
	EstablishedYear: "established_year",
	ListedYear:      "listed_year",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
}

var CricketGroundTableColumns = struct {
	GroundID        string
	GroundName      string
	Location        string
	TeamCountry     string
	TeamState       string
	TeamCity        string
	Capacity        string
	EstablishedYear string
	ListedYear      string
	CreatedAt       string
	UpdatedAt       string
}{
	GroundID:        "cricket_grounds.ground_id",
	GroundName:      "cricket_grounds.ground_name",
	Location:        "cricket_grounds.location",
	TeamCountry:     "cricket_grounds.team_country",
	TeamState:       "cricket_grounds.team_state",
	TeamCity:        "cricket_grounds.team_city",
	Capacity:        "cricket_grounds.capacity",
	EstablishedYear: "cricket_grounds.established_year",
	ListedYear:      "cricket_grounds.listed_year",
	CreatedAt:       "cricket_grounds.created_at",
	UpdatedAt:       "cricket_grounds.updated_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CricketGroundWhere = struct {
	GroundID        whereHelperint
	GroundName      whereHelperstring
	Location        whereHelpernull_String
	TeamCountry     whereHelpernull_String
	TeamState       whereHelpernull_String
	TeamCity        whereHelpernull_String
	Capacity        whereHelpernull_Int
	EstablishedYear whereHelpernull_Int
	ListedYear      whereHelpernull_Int
	CreatedAt       whereHelpernull_Time
	UpdatedAt       whereHelpernull_Time
}{
	GroundID:        whereHelperint{field: "\"cricket_grounds\".\"ground_id\""},
	GroundName:      whereHelperstring{field: "\"cricket_grounds\".\"ground_name\""},
	Location:        whereHelpernull_String{field: "\"cricket_grounds\".\"location\""},
	TeamCountry:     whereHelpernull_String{field: "\"cricket_grounds\".\"team_country\""},
	TeamState:       whereHelpernull_String{field: "\"cricket_grounds\".\"team_state\""},
	TeamCity:        whereHelpernull_String{field: "\"cricket_grounds\".\"team_city\""},
	Capacity:        whereHelpernull_Int{field: "\"cricket_grounds\".\"capacity\""},
	EstablishedYear: whereHelpernull_Int{field: "\"cricket_grounds\".\"established_year\""},
	ListedYear:      whereHelpernull_Int{field: "\"cricket_grounds\".\"listed_year\""},
	CreatedAt:       whereHelpernull_Time{field: "\"cricket_grounds\".\"created_at\""},
	UpdatedAt:       whereHelpernull_Time{field: "\"cricket_grounds\".\"updated_at\""},
}

// CricketGroundRels is where relationship names are stored.
var CricketGroundRels = struct {
	GroundGroundBookings string
}{
	GroundGroundBookings: "GroundGroundBookings",
}

// cricketGroundR is where relationships are stored.
type cricketGroundR struct {
	GroundGroundBookings GroundBookingSlice `boil:"GroundGroundBookings" json:"GroundGroundBookings" toml:"GroundGroundBookings" yaml:"GroundGroundBookings"`
}

// NewStruct creates a new relationship struct
func (*cricketGroundR) NewStruct() *cricketGroundR {
	return &cricketGroundR{}
}

func (r *cricketGroundR) GetGroundGroundBookings() GroundBookingSlice {
	if r == nil {
		return nil
	}
	return r.GroundGroundBookings
}

// cricketGroundL is where Load methods for each relationship are stored.
type cricketGroundL struct{}

var (
	cricketGroundAllColumns            = []string{"ground_id", "ground_name", "location", "team_country", "team_state", "team_city", "capacity", "established_year", "listed_year", "created_at", "updated_at"}
	cricketGroundColumnsWithoutDefault = []string{"ground_name"}
	cricketGroundColumnsWithDefault    = []string{"ground_id", "location", "team_country", "team_state", "team_city", "capacity", "established_year", "listed_year", "created_at", "updated_at"}
	cricketGroundPrimaryKeyColumns     = []string{"ground_id"}
	cricketGroundGeneratedColumns      = []string{}
)

type (
	// CricketGroundSlice is an alias for a slice of pointers to CricketGround.
	// This should almost always be used instead of []CricketGround.
	CricketGroundSlice []*CricketGround
	// CricketGroundHook is the signature for custom CricketGround hook methods
	CricketGroundHook func(context.Context, boil.ContextExecutor, *CricketGround) error

	cricketGroundQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cricketGroundType                 = reflect.TypeOf(&CricketGround{})
	cricketGroundMapping              = queries.MakeStructMapping(cricketGroundType)
	cricketGroundPrimaryKeyMapping, _ = queries.BindMapping(cricketGroundType, cricketGroundMapping, cricketGroundPrimaryKeyColumns)
	cricketGroundInsertCacheMut       sync.RWMutex
	cricketGroundInsertCache          = make(map[string]insertCache)
	cricketGroundUpdateCacheMut       sync.RWMutex
	cricketGroundUpdateCache          = make(map[string]updateCache)
	cricketGroundUpsertCacheMut       sync.RWMutex
	cricketGroundUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cricketGroundAfterSelectHooks []CricketGroundHook

var cricketGroundBeforeInsertHooks []CricketGroundHook
var cricketGroundAfterInsertHooks []CricketGroundHook

var cricketGroundBeforeUpdateHooks []CricketGroundHook
var cricketGroundAfterUpdateHooks []CricketGroundHook

var cricketGroundBeforeDeleteHooks []CricketGroundHook
var cricketGroundAfterDeleteHooks []CricketGroundHook

var cricketGroundBeforeUpsertHooks []CricketGroundHook
var cricketGroundAfterUpsertHooks []CricketGroundHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CricketGround) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cricketGroundAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CricketGround) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cricketGroundBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CricketGround) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cricketGroundAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CricketGround) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cricketGroundBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CricketGround) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cricketGroundAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CricketGround) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cricketGroundBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CricketGround) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cricketGroundAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CricketGround) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cricketGroundBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CricketGround) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cricketGroundAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCricketGroundHook registers your hook function for all future operations.
func AddCricketGroundHook(hookPoint boil.HookPoint, cricketGroundHook CricketGroundHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		cricketGroundAfterSelectHooks = append(cricketGroundAfterSelectHooks, cricketGroundHook)
	case boil.BeforeInsertHook:
		cricketGroundBeforeInsertHooks = append(cricketGroundBeforeInsertHooks, cricketGroundHook)
	case boil.AfterInsertHook:
		cricketGroundAfterInsertHooks = append(cricketGroundAfterInsertHooks, cricketGroundHook)
	case boil.BeforeUpdateHook:
		cricketGroundBeforeUpdateHooks = append(cricketGroundBeforeUpdateHooks, cricketGroundHook)
	case boil.AfterUpdateHook:
		cricketGroundAfterUpdateHooks = append(cricketGroundAfterUpdateHooks, cricketGroundHook)
	case boil.BeforeDeleteHook:
		cricketGroundBeforeDeleteHooks = append(cricketGroundBeforeDeleteHooks, cricketGroundHook)
	case boil.AfterDeleteHook:
		cricketGroundAfterDeleteHooks = append(cricketGroundAfterDeleteHooks, cricketGroundHook)
	case boil.BeforeUpsertHook:
		cricketGroundBeforeUpsertHooks = append(cricketGroundBeforeUpsertHooks, cricketGroundHook)
	case boil.AfterUpsertHook:
		cricketGroundAfterUpsertHooks = append(cricketGroundAfterUpsertHooks, cricketGroundHook)
	}
}

// OneG returns a single cricketGround record from the query using the global executor.
func (q cricketGroundQuery) OneG(ctx context.Context) (*CricketGround, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single cricketGround record from the query.
func (q cricketGroundQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CricketGround, error) {
	o := &CricketGround{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cricket_grounds")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all CricketGround records from the query using the global executor.
func (q cricketGroundQuery) AllG(ctx context.Context) (CricketGroundSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all CricketGround records from the query.
func (q cricketGroundQuery) All(ctx context.Context, exec boil.ContextExecutor) (CricketGroundSlice, error) {
	var o []*CricketGround

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CricketGround slice")
	}

	if len(cricketGroundAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all CricketGround records in the query using the global executor
func (q cricketGroundQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all CricketGround records in the query.
func (q cricketGroundQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cricket_grounds rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q cricketGroundQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q cricketGroundQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cricket_grounds exists")
	}

	return count > 0, nil
}

// GroundGroundBookings retrieves all the ground_booking's GroundBookings with an executor via ground_id column.
func (o *CricketGround) GroundGroundBookings(mods ...qm.QueryMod) groundBookingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"ground_bookings\".\"ground_id\"=?", o.GroundID),
	)

	return GroundBookings(queryMods...)
}

// LoadGroundGroundBookings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (cricketGroundL) LoadGroundGroundBookings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCricketGround interface{}, mods queries.Applicator) error {
	var slice []*CricketGround
	var object *CricketGround

	if singular {
		var ok bool
		object, ok = maybeCricketGround.(*CricketGround)
		if !ok {
			object = new(CricketGround)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCricketGround)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCricketGround))
			}
		}
	} else {
		s, ok := maybeCricketGround.(*[]*CricketGround)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCricketGround)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCricketGround))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cricketGroundR{}
		}
		args = append(args, object.GroundID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cricketGroundR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GroundID) {
					continue Outer
				}
			}

			args = append(args, obj.GroundID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`ground_bookings`),
		qm.WhereIn(`ground_bookings.ground_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ground_bookings")
	}

	var resultSlice []*GroundBooking
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ground_bookings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on ground_bookings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ground_bookings")
	}

	if len(groundBookingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GroundGroundBookings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &groundBookingR{}
			}
			foreign.R.Ground = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GroundID, foreign.GroundID) {
				local.R.GroundGroundBookings = append(local.R.GroundGroundBookings, foreign)
				if foreign.R == nil {
					foreign.R = &groundBookingR{}
				}
				foreign.R.Ground = local
				break
			}
		}
	}

	return nil
}

// AddGroundGroundBookingsG adds the given related objects to the existing relationships
// of the cricket_ground, optionally inserting them as new records.
// Appends related to o.R.GroundGroundBookings.
// Sets related.R.Ground appropriately.
// Uses the global database handle.
func (o *CricketGround) AddGroundGroundBookingsG(ctx context.Context, insert bool, related ...*GroundBooking) error {
	return o.AddGroundGroundBookings(ctx, boil.GetContextDB(), insert, related...)
}

// AddGroundGroundBookings adds the given related objects to the existing relationships
// of the cricket_ground, optionally inserting them as new records.
// Appends related to o.R.GroundGroundBookings.
// Sets related.R.Ground appropriately.
func (o *CricketGround) AddGroundGroundBookings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GroundBooking) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.GroundID, o.GroundID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"ground_bookings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"ground_id"}),
				strmangle.WhereClause("\"", "\"", 2, groundBookingPrimaryKeyColumns),
			)
			values := []interface{}{o.GroundID, rel.BookingID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.GroundID, o.GroundID)
		}
	}

	if o.R == nil {
		o.R = &cricketGroundR{
			GroundGroundBookings: related,
		}
	} else {
		o.R.GroundGroundBookings = append(o.R.GroundGroundBookings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &groundBookingR{
				Ground: o,
			}
		} else {
			rel.R.Ground = o
		}
	}
	return nil
}

// SetGroundGroundBookingsG removes all previously related items of the
// cricket_ground replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Ground's GroundGroundBookings accordingly.
// Replaces o.R.GroundGroundBookings with related.
// Sets related.R.Ground's GroundGroundBookings accordingly.
// Uses the global database handle.
func (o *CricketGround) SetGroundGroundBookingsG(ctx context.Context, insert bool, related ...*GroundBooking) error {
	return o.SetGroundGroundBookings(ctx, boil.GetContextDB(), insert, related...)
}

// SetGroundGroundBookings removes all previously related items of the
// cricket_ground replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Ground's GroundGroundBookings accordingly.
// Replaces o.R.GroundGroundBookings with related.
// Sets related.R.Ground's GroundGroundBookings accordingly.
func (o *CricketGround) SetGroundGroundBookings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GroundBooking) error {
	query := "update \"ground_bookings\" set \"ground_id\" = null where \"ground_id\" = $1"
	values := []interface{}{o.GroundID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.GroundGroundBookings {
			queries.SetScanner(&rel.GroundID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Ground = nil
		}
		o.R.GroundGroundBookings = nil
	}

	return o.AddGroundGroundBookings(ctx, exec, insert, related...)
}

// RemoveGroundGroundBookingsG relationships from objects passed in.
// Removes related items from R.GroundGroundBookings (uses pointer comparison, removal does not keep order)
// Sets related.R.Ground.
// Uses the global database handle.
func (o *CricketGround) RemoveGroundGroundBookingsG(ctx context.Context, related ...*GroundBooking) error {
	return o.RemoveGroundGroundBookings(ctx, boil.GetContextDB(), related...)
}

// RemoveGroundGroundBookings relationships from objects passed in.
// Removes related items from R.GroundGroundBookings (uses pointer comparison, removal does not keep order)
// Sets related.R.Ground.
func (o *CricketGround) RemoveGroundGroundBookings(ctx context.Context, exec boil.ContextExecutor, related ...*GroundBooking) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.GroundID, nil)
		if rel.R != nil {
			rel.R.Ground = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("ground_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.GroundGroundBookings {
			if rel != ri {
				continue
			}

			ln := len(o.R.GroundGroundBookings)
			if ln > 1 && i < ln-1 {
				o.R.GroundGroundBookings[i] = o.R.GroundGroundBookings[ln-1]
			}
			o.R.GroundGroundBookings = o.R.GroundGroundBookings[:ln-1]
			break
		}
	}

	return nil
}

// CricketGrounds retrieves all the records using an executor.
func CricketGrounds(mods ...qm.QueryMod) cricketGroundQuery {
	mods = append(mods, qm.From("\"cricket_grounds\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"cricket_grounds\".*"})
	}

	return cricketGroundQuery{q}
}

// FindCricketGroundG retrieves a single record by ID.
func FindCricketGroundG(ctx context.Context, groundID int, selectCols ...string) (*CricketGround, error) {
	return FindCricketGround(ctx, boil.GetContextDB(), groundID, selectCols...)
}

// FindCricketGround retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCricketGround(ctx context.Context, exec boil.ContextExecutor, groundID int, selectCols ...string) (*CricketGround, error) {
	cricketGroundObj := &CricketGround{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"cricket_grounds\" where \"ground_id\"=$1", sel,
	)

	q := queries.Raw(query, groundID)

	err := q.Bind(ctx, exec, cricketGroundObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cricket_grounds")
	}

	if err = cricketGroundObj.doAfterSelectHooks(ctx, exec); err != nil {
		return cricketGroundObj, err
	}

	return cricketGroundObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CricketGround) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CricketGround) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cricket_grounds provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cricketGroundColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cricketGroundInsertCacheMut.RLock()
	cache, cached := cricketGroundInsertCache[key]
	cricketGroundInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cricketGroundAllColumns,
			cricketGroundColumnsWithDefault,
			cricketGroundColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cricketGroundType, cricketGroundMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cricketGroundType, cricketGroundMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"cricket_grounds\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"cricket_grounds\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cricket_grounds")
	}

	if !cached {
		cricketGroundInsertCacheMut.Lock()
		cricketGroundInsertCache[key] = cache
		cricketGroundInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single CricketGround record using the global executor.
// See Update for more documentation.
func (o *CricketGround) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the CricketGround.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CricketGround) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cricketGroundUpdateCacheMut.RLock()
	cache, cached := cricketGroundUpdateCache[key]
	cricketGroundUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cricketGroundAllColumns,
			cricketGroundPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cricket_grounds, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"cricket_grounds\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, cricketGroundPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cricketGroundType, cricketGroundMapping, append(wl, cricketGroundPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cricket_grounds row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cricket_grounds")
	}

	if !cached {
		cricketGroundUpdateCacheMut.Lock()
		cricketGroundUpdateCache[key] = cache
		cricketGroundUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q cricketGroundQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q cricketGroundQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cricket_grounds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cricket_grounds")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CricketGroundSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CricketGroundSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cricketGroundPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"cricket_grounds\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, cricketGroundPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cricketGround slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cricketGround")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CricketGround) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CricketGround) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cricket_grounds provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cricketGroundColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cricketGroundUpsertCacheMut.RLock()
	cache, cached := cricketGroundUpsertCache[key]
	cricketGroundUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cricketGroundAllColumns,
			cricketGroundColumnsWithDefault,
			cricketGroundColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			cricketGroundAllColumns,
			cricketGroundPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert cricket_grounds, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(cricketGroundPrimaryKeyColumns))
			copy(conflict, cricketGroundPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"cricket_grounds\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(cricketGroundType, cricketGroundMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cricketGroundType, cricketGroundMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert cricket_grounds")
	}

	if !cached {
		cricketGroundUpsertCacheMut.Lock()
		cricketGroundUpsertCache[key] = cache
		cricketGroundUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single CricketGround record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CricketGround) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single CricketGround record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CricketGround) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CricketGround provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cricketGroundPrimaryKeyMapping)
	sql := "DELETE FROM \"cricket_grounds\" WHERE \"ground_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cricket_grounds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cricket_grounds")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q cricketGroundQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q cricketGroundQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cricketGroundQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cricket_grounds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cricket_grounds")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CricketGroundSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CricketGroundSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cricketGroundBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cricketGroundPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"cricket_grounds\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cricketGroundPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cricketGround slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cricket_grounds")
	}

	if len(cricketGroundAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CricketGround) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no CricketGround provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CricketGround) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCricketGround(ctx, exec, o.GroundID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CricketGroundSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty CricketGroundSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CricketGroundSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CricketGroundSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cricketGroundPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"cricket_grounds\".* FROM \"cricket_grounds\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cricketGroundPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CricketGroundSlice")
	}

	*o = slice

	return nil
}

// CricketGroundExistsG checks if the CricketGround row exists.
func CricketGroundExistsG(ctx context.Context, groundID int) (bool, error) {
	return CricketGroundExists(ctx, boil.GetContextDB(), groundID)
}

// CricketGroundExists checks if the CricketGround row exists.
func CricketGroundExists(ctx context.Context, exec boil.ContextExecutor, groundID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"cricket_grounds\" where \"ground_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, groundID)
	}
	row := exec.QueryRowContext(ctx, sql, groundID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cricket_grounds exists")
	}

	return exists, nil
}

// Exists checks if the CricketGround row exists.
func (o *CricketGround) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CricketGroundExists(ctx, exec, o.GroundID)
}
