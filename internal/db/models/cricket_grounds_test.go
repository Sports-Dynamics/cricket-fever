// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCricketGrounds(t *testing.T) {
	t.Parallel()

	query := CricketGrounds()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCricketGroundsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketGround{}
	if err = randomize.Struct(seed, o, cricketGroundDBTypes, true, cricketGroundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketGround struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CricketGrounds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCricketGroundsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketGround{}
	if err = randomize.Struct(seed, o, cricketGroundDBTypes, true, cricketGroundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketGround struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CricketGrounds().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CricketGrounds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCricketGroundsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketGround{}
	if err = randomize.Struct(seed, o, cricketGroundDBTypes, true, cricketGroundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketGround struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CricketGroundSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CricketGrounds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCricketGroundsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketGround{}
	if err = randomize.Struct(seed, o, cricketGroundDBTypes, true, cricketGroundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketGround struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CricketGroundExists(ctx, tx, o.GroundID)
	if err != nil {
		t.Errorf("Unable to check if CricketGround exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CricketGroundExists to return true, but got false.")
	}
}

func testCricketGroundsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketGround{}
	if err = randomize.Struct(seed, o, cricketGroundDBTypes, true, cricketGroundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketGround struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	cricketGroundFound, err := FindCricketGround(ctx, tx, o.GroundID)
	if err != nil {
		t.Error(err)
	}

	if cricketGroundFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCricketGroundsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketGround{}
	if err = randomize.Struct(seed, o, cricketGroundDBTypes, true, cricketGroundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketGround struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CricketGrounds().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCricketGroundsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketGround{}
	if err = randomize.Struct(seed, o, cricketGroundDBTypes, true, cricketGroundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketGround struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CricketGrounds().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCricketGroundsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cricketGroundOne := &CricketGround{}
	cricketGroundTwo := &CricketGround{}
	if err = randomize.Struct(seed, cricketGroundOne, cricketGroundDBTypes, false, cricketGroundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketGround struct: %s", err)
	}
	if err = randomize.Struct(seed, cricketGroundTwo, cricketGroundDBTypes, false, cricketGroundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketGround struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = cricketGroundOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = cricketGroundTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CricketGrounds().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCricketGroundsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	cricketGroundOne := &CricketGround{}
	cricketGroundTwo := &CricketGround{}
	if err = randomize.Struct(seed, cricketGroundOne, cricketGroundDBTypes, false, cricketGroundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketGround struct: %s", err)
	}
	if err = randomize.Struct(seed, cricketGroundTwo, cricketGroundDBTypes, false, cricketGroundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketGround struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = cricketGroundOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = cricketGroundTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CricketGrounds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func cricketGroundBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *CricketGround) error {
	*o = CricketGround{}
	return nil
}

func cricketGroundAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *CricketGround) error {
	*o = CricketGround{}
	return nil
}

func cricketGroundAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *CricketGround) error {
	*o = CricketGround{}
	return nil
}

func cricketGroundBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CricketGround) error {
	*o = CricketGround{}
	return nil
}

func cricketGroundAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CricketGround) error {
	*o = CricketGround{}
	return nil
}

func cricketGroundBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CricketGround) error {
	*o = CricketGround{}
	return nil
}

func cricketGroundAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CricketGround) error {
	*o = CricketGround{}
	return nil
}

func cricketGroundBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CricketGround) error {
	*o = CricketGround{}
	return nil
}

func cricketGroundAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CricketGround) error {
	*o = CricketGround{}
	return nil
}

func testCricketGroundsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &CricketGround{}
	o := &CricketGround{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, cricketGroundDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CricketGround object: %s", err)
	}

	AddCricketGroundHook(boil.BeforeInsertHook, cricketGroundBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	cricketGroundBeforeInsertHooks = []CricketGroundHook{}

	AddCricketGroundHook(boil.AfterInsertHook, cricketGroundAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	cricketGroundAfterInsertHooks = []CricketGroundHook{}

	AddCricketGroundHook(boil.AfterSelectHook, cricketGroundAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	cricketGroundAfterSelectHooks = []CricketGroundHook{}

	AddCricketGroundHook(boil.BeforeUpdateHook, cricketGroundBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	cricketGroundBeforeUpdateHooks = []CricketGroundHook{}

	AddCricketGroundHook(boil.AfterUpdateHook, cricketGroundAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	cricketGroundAfterUpdateHooks = []CricketGroundHook{}

	AddCricketGroundHook(boil.BeforeDeleteHook, cricketGroundBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	cricketGroundBeforeDeleteHooks = []CricketGroundHook{}

	AddCricketGroundHook(boil.AfterDeleteHook, cricketGroundAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	cricketGroundAfterDeleteHooks = []CricketGroundHook{}

	AddCricketGroundHook(boil.BeforeUpsertHook, cricketGroundBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	cricketGroundBeforeUpsertHooks = []CricketGroundHook{}

	AddCricketGroundHook(boil.AfterUpsertHook, cricketGroundAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	cricketGroundAfterUpsertHooks = []CricketGroundHook{}
}

func testCricketGroundsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketGround{}
	if err = randomize.Struct(seed, o, cricketGroundDBTypes, true, cricketGroundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketGround struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CricketGrounds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCricketGroundsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketGround{}
	if err = randomize.Struct(seed, o, cricketGroundDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CricketGround struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(cricketGroundColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CricketGrounds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCricketGroundToManyGroundGroundBookings(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CricketGround
	var b, c GroundBooking

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cricketGroundDBTypes, true, cricketGroundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketGround struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, groundBookingDBTypes, false, groundBookingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, groundBookingDBTypes, false, groundBookingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.GroundID, a.GroundID)
	queries.Assign(&c.GroundID, a.GroundID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.GroundGroundBookings().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.GroundID, b.GroundID) {
			bFound = true
		}
		if queries.Equal(v.GroundID, c.GroundID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CricketGroundSlice{&a}
	if err = a.L.LoadGroundGroundBookings(ctx, tx, false, (*[]*CricketGround)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GroundGroundBookings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GroundGroundBookings = nil
	if err = a.L.LoadGroundGroundBookings(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GroundGroundBookings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCricketGroundToManyAddOpGroundGroundBookings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CricketGround
	var b, c, d, e GroundBooking

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cricketGroundDBTypes, false, strmangle.SetComplement(cricketGroundPrimaryKeyColumns, cricketGroundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GroundBooking{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, groundBookingDBTypes, false, strmangle.SetComplement(groundBookingPrimaryKeyColumns, groundBookingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GroundBooking{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGroundGroundBookings(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.GroundID, first.GroundID) {
			t.Error("foreign key was wrong value", a.GroundID, first.GroundID)
		}
		if !queries.Equal(a.GroundID, second.GroundID) {
			t.Error("foreign key was wrong value", a.GroundID, second.GroundID)
		}

		if first.R.Ground != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Ground != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GroundGroundBookings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GroundGroundBookings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GroundGroundBookings().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCricketGroundToManySetOpGroundGroundBookings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CricketGround
	var b, c, d, e GroundBooking

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cricketGroundDBTypes, false, strmangle.SetComplement(cricketGroundPrimaryKeyColumns, cricketGroundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GroundBooking{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, groundBookingDBTypes, false, strmangle.SetComplement(groundBookingPrimaryKeyColumns, groundBookingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetGroundGroundBookings(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.GroundGroundBookings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetGroundGroundBookings(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.GroundGroundBookings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.GroundID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.GroundID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.GroundID, d.GroundID) {
		t.Error("foreign key was wrong value", a.GroundID, d.GroundID)
	}
	if !queries.Equal(a.GroundID, e.GroundID) {
		t.Error("foreign key was wrong value", a.GroundID, e.GroundID)
	}

	if b.R.Ground != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Ground != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Ground != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Ground != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.GroundGroundBookings[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.GroundGroundBookings[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testCricketGroundToManyRemoveOpGroundGroundBookings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CricketGround
	var b, c, d, e GroundBooking

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cricketGroundDBTypes, false, strmangle.SetComplement(cricketGroundPrimaryKeyColumns, cricketGroundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GroundBooking{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, groundBookingDBTypes, false, strmangle.SetComplement(groundBookingPrimaryKeyColumns, groundBookingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddGroundGroundBookings(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.GroundGroundBookings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveGroundGroundBookings(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.GroundGroundBookings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.GroundID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.GroundID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Ground != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Ground != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Ground != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Ground != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.GroundGroundBookings) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.GroundGroundBookings[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.GroundGroundBookings[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testCricketGroundsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketGround{}
	if err = randomize.Struct(seed, o, cricketGroundDBTypes, true, cricketGroundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketGround struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCricketGroundsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketGround{}
	if err = randomize.Struct(seed, o, cricketGroundDBTypes, true, cricketGroundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketGround struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CricketGroundSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCricketGroundsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketGround{}
	if err = randomize.Struct(seed, o, cricketGroundDBTypes, true, cricketGroundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketGround struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CricketGrounds().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	cricketGroundDBTypes = map[string]string{`GroundID`: `integer`, `GroundUUID`: `uuid`, `GroundName`: `character varying`, `Location`: `character varying`, `TeamCountry`: `character varying`, `TeamState`: `character varying`, `TeamCity`: `character varying`, `Capacity`: `integer`, `EstablishedYear`: `integer`, `ListedYear`: `integer`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_                    = bytes.MinRead
)

func testCricketGroundsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(cricketGroundPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(cricketGroundAllColumns) == len(cricketGroundPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CricketGround{}
	if err = randomize.Struct(seed, o, cricketGroundDBTypes, true, cricketGroundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketGround struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CricketGrounds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, cricketGroundDBTypes, true, cricketGroundPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CricketGround struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCricketGroundsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(cricketGroundAllColumns) == len(cricketGroundPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CricketGround{}
	if err = randomize.Struct(seed, o, cricketGroundDBTypes, true, cricketGroundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketGround struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CricketGrounds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, cricketGroundDBTypes, true, cricketGroundPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CricketGround struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(cricketGroundAllColumns, cricketGroundPrimaryKeyColumns) {
		fields = cricketGroundAllColumns
	} else {
		fields = strmangle.SetComplement(
			cricketGroundAllColumns,
			cricketGroundPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CricketGroundSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCricketGroundsUpsert(t *testing.T) {
	t.Parallel()

	if len(cricketGroundAllColumns) == len(cricketGroundPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CricketGround{}
	if err = randomize.Struct(seed, &o, cricketGroundDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CricketGround struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CricketGround: %s", err)
	}

	count, err := CricketGrounds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, cricketGroundDBTypes, false, cricketGroundPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CricketGround struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CricketGround: %s", err)
	}

	count, err = CricketGrounds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
