// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GroundBooking is an object representing the database table.
type GroundBooking struct {
	BookingID   int         `boil:"booking_id" json:"booking_id" toml:"booking_id" yaml:"booking_id"`
	BookingUUID string      `boil:"booking_uuid" json:"booking_uuid" toml:"booking_uuid" yaml:"booking_uuid"`
	TeamID      null.Int    `boil:"team_id" json:"team_id,omitempty" toml:"team_id" yaml:"team_id,omitempty"`
	PlayerID    null.Int    `boil:"player_id" json:"player_id,omitempty" toml:"player_id" yaml:"player_id,omitempty"`
	GroundID    null.Int    `boil:"ground_id" json:"ground_id,omitempty" toml:"ground_id" yaml:"ground_id,omitempty"`
	BookingDate time.Time   `boil:"booking_date" json:"booking_date" toml:"booking_date" yaml:"booking_date"`
	StartTime   time.Time   `boil:"start_time" json:"start_time" toml:"start_time" yaml:"start_time"`
	EndTime     time.Time   `boil:"end_time" json:"end_time" toml:"end_time" yaml:"end_time"`
	Purpose     null.String `boil:"purpose" json:"purpose,omitempty" toml:"purpose" yaml:"purpose,omitempty"`
	Status      null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`

	R *groundBookingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L groundBookingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GroundBookingColumns = struct {
	BookingID   string
	BookingUUID string
	TeamID      string
	PlayerID    string
	GroundID    string
	BookingDate string
	StartTime   string
	EndTime     string
	Purpose     string
	Status      string
}{
	BookingID:   "booking_id",
	BookingUUID: "booking_uuid",
	TeamID:      "team_id",
	PlayerID:    "player_id",
	GroundID:    "ground_id",
	BookingDate: "booking_date",
	StartTime:   "start_time",
	EndTime:     "end_time",
	Purpose:     "purpose",
	Status:      "status",
}

var GroundBookingTableColumns = struct {
	BookingID   string
	BookingUUID string
	TeamID      string
	PlayerID    string
	GroundID    string
	BookingDate string
	StartTime   string
	EndTime     string
	Purpose     string
	Status      string
}{
	BookingID:   "ground_bookings.booking_id",
	BookingUUID: "ground_bookings.booking_uuid",
	TeamID:      "ground_bookings.team_id",
	PlayerID:    "ground_bookings.player_id",
	GroundID:    "ground_bookings.ground_id",
	BookingDate: "ground_bookings.booking_date",
	StartTime:   "ground_bookings.start_time",
	EndTime:     "ground_bookings.end_time",
	Purpose:     "ground_bookings.purpose",
	Status:      "ground_bookings.status",
}

// Generated where

var GroundBookingWhere = struct {
	BookingID   whereHelperint
	BookingUUID whereHelperstring
	TeamID      whereHelpernull_Int
	PlayerID    whereHelpernull_Int
	GroundID    whereHelpernull_Int
	BookingDate whereHelpertime_Time
	StartTime   whereHelpertime_Time
	EndTime     whereHelpertime_Time
	Purpose     whereHelpernull_String
	Status      whereHelpernull_String
}{
	BookingID:   whereHelperint{field: "\"ground_bookings\".\"booking_id\""},
	BookingUUID: whereHelperstring{field: "\"ground_bookings\".\"booking_uuid\""},
	TeamID:      whereHelpernull_Int{field: "\"ground_bookings\".\"team_id\""},
	PlayerID:    whereHelpernull_Int{field: "\"ground_bookings\".\"player_id\""},
	GroundID:    whereHelpernull_Int{field: "\"ground_bookings\".\"ground_id\""},
	BookingDate: whereHelpertime_Time{field: "\"ground_bookings\".\"booking_date\""},
	StartTime:   whereHelpertime_Time{field: "\"ground_bookings\".\"start_time\""},
	EndTime:     whereHelpertime_Time{field: "\"ground_bookings\".\"end_time\""},
	Purpose:     whereHelpernull_String{field: "\"ground_bookings\".\"purpose\""},
	Status:      whereHelpernull_String{field: "\"ground_bookings\".\"status\""},
}

// GroundBookingRels is where relationship names are stored.
var GroundBookingRels = struct {
	Ground          string
	Player          string
	Team            string
	BookingPayments string
}{
	Ground:          "Ground",
	Player:          "Player",
	Team:            "Team",
	BookingPayments: "BookingPayments",
}

// groundBookingR is where relationships are stored.
type groundBookingR struct {
	Ground          *CricketGround `boil:"Ground" json:"Ground" toml:"Ground" yaml:"Ground"`
	Player          *CricketPlayer `boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
	Team            *CricketTeam   `boil:"Team" json:"Team" toml:"Team" yaml:"Team"`
	BookingPayments PaymentSlice   `boil:"BookingPayments" json:"BookingPayments" toml:"BookingPayments" yaml:"BookingPayments"`
}

// NewStruct creates a new relationship struct
func (*groundBookingR) NewStruct() *groundBookingR {
	return &groundBookingR{}
}

func (r *groundBookingR) GetGround() *CricketGround {
	if r == nil {
		return nil
	}
	return r.Ground
}

func (r *groundBookingR) GetPlayer() *CricketPlayer {
	if r == nil {
		return nil
	}
	return r.Player
}

func (r *groundBookingR) GetTeam() *CricketTeam {
	if r == nil {
		return nil
	}
	return r.Team
}

func (r *groundBookingR) GetBookingPayments() PaymentSlice {
	if r == nil {
		return nil
	}
	return r.BookingPayments
}

// groundBookingL is where Load methods for each relationship are stored.
type groundBookingL struct{}

var (
	groundBookingAllColumns            = []string{"booking_id", "booking_uuid", "team_id", "player_id", "ground_id", "booking_date", "start_time", "end_time", "purpose", "status"}
	groundBookingColumnsWithoutDefault = []string{"booking_uuid", "booking_date", "start_time", "end_time"}
	groundBookingColumnsWithDefault    = []string{"booking_id", "team_id", "player_id", "ground_id", "purpose", "status"}
	groundBookingPrimaryKeyColumns     = []string{"booking_id"}
	groundBookingGeneratedColumns      = []string{}
)

type (
	// GroundBookingSlice is an alias for a slice of pointers to GroundBooking.
	// This should almost always be used instead of []GroundBooking.
	GroundBookingSlice []*GroundBooking
	// GroundBookingHook is the signature for custom GroundBooking hook methods
	GroundBookingHook func(context.Context, boil.ContextExecutor, *GroundBooking) error

	groundBookingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	groundBookingType                 = reflect.TypeOf(&GroundBooking{})
	groundBookingMapping              = queries.MakeStructMapping(groundBookingType)
	groundBookingPrimaryKeyMapping, _ = queries.BindMapping(groundBookingType, groundBookingMapping, groundBookingPrimaryKeyColumns)
	groundBookingInsertCacheMut       sync.RWMutex
	groundBookingInsertCache          = make(map[string]insertCache)
	groundBookingUpdateCacheMut       sync.RWMutex
	groundBookingUpdateCache          = make(map[string]updateCache)
	groundBookingUpsertCacheMut       sync.RWMutex
	groundBookingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var groundBookingAfterSelectHooks []GroundBookingHook

var groundBookingBeforeInsertHooks []GroundBookingHook
var groundBookingAfterInsertHooks []GroundBookingHook

var groundBookingBeforeUpdateHooks []GroundBookingHook
var groundBookingAfterUpdateHooks []GroundBookingHook

var groundBookingBeforeDeleteHooks []GroundBookingHook
var groundBookingAfterDeleteHooks []GroundBookingHook

var groundBookingBeforeUpsertHooks []GroundBookingHook
var groundBookingAfterUpsertHooks []GroundBookingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GroundBooking) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groundBookingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GroundBooking) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groundBookingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GroundBooking) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groundBookingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GroundBooking) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groundBookingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GroundBooking) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groundBookingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GroundBooking) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groundBookingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GroundBooking) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groundBookingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GroundBooking) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groundBookingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GroundBooking) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groundBookingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGroundBookingHook registers your hook function for all future operations.
func AddGroundBookingHook(hookPoint boil.HookPoint, groundBookingHook GroundBookingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		groundBookingAfterSelectHooks = append(groundBookingAfterSelectHooks, groundBookingHook)
	case boil.BeforeInsertHook:
		groundBookingBeforeInsertHooks = append(groundBookingBeforeInsertHooks, groundBookingHook)
	case boil.AfterInsertHook:
		groundBookingAfterInsertHooks = append(groundBookingAfterInsertHooks, groundBookingHook)
	case boil.BeforeUpdateHook:
		groundBookingBeforeUpdateHooks = append(groundBookingBeforeUpdateHooks, groundBookingHook)
	case boil.AfterUpdateHook:
		groundBookingAfterUpdateHooks = append(groundBookingAfterUpdateHooks, groundBookingHook)
	case boil.BeforeDeleteHook:
		groundBookingBeforeDeleteHooks = append(groundBookingBeforeDeleteHooks, groundBookingHook)
	case boil.AfterDeleteHook:
		groundBookingAfterDeleteHooks = append(groundBookingAfterDeleteHooks, groundBookingHook)
	case boil.BeforeUpsertHook:
		groundBookingBeforeUpsertHooks = append(groundBookingBeforeUpsertHooks, groundBookingHook)
	case boil.AfterUpsertHook:
		groundBookingAfterUpsertHooks = append(groundBookingAfterUpsertHooks, groundBookingHook)
	}
}

// OneG returns a single groundBooking record from the query using the global executor.
func (q groundBookingQuery) OneG(ctx context.Context) (*GroundBooking, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single groundBooking record from the query.
func (q groundBookingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GroundBooking, error) {
	o := &GroundBooking{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ground_bookings")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all GroundBooking records from the query using the global executor.
func (q groundBookingQuery) AllG(ctx context.Context) (GroundBookingSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all GroundBooking records from the query.
func (q groundBookingQuery) All(ctx context.Context, exec boil.ContextExecutor) (GroundBookingSlice, error) {
	var o []*GroundBooking

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GroundBooking slice")
	}

	if len(groundBookingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all GroundBooking records in the query using the global executor
func (q groundBookingQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all GroundBooking records in the query.
func (q groundBookingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ground_bookings rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q groundBookingQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q groundBookingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ground_bookings exists")
	}

	return count > 0, nil
}

// Ground pointed to by the foreign key.
func (o *GroundBooking) Ground(mods ...qm.QueryMod) cricketGroundQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"ground_id\" = ?", o.GroundID),
	}

	queryMods = append(queryMods, mods...)

	return CricketGrounds(queryMods...)
}

// Player pointed to by the foreign key.
func (o *GroundBooking) Player(mods ...qm.QueryMod) cricketPlayerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"player_id\" = ?", o.PlayerID),
	}

	queryMods = append(queryMods, mods...)

	return CricketPlayers(queryMods...)
}

// Team pointed to by the foreign key.
func (o *GroundBooking) Team(mods ...qm.QueryMod) cricketTeamQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"team_id\" = ?", o.TeamID),
	}

	queryMods = append(queryMods, mods...)

	return CricketTeams(queryMods...)
}

// BookingPayments retrieves all the payment's Payments with an executor via booking_id column.
func (o *GroundBooking) BookingPayments(mods ...qm.QueryMod) paymentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"payments\".\"booking_id\"=?", o.BookingID),
	)

	return Payments(queryMods...)
}

// LoadGround allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (groundBookingL) LoadGround(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGroundBooking interface{}, mods queries.Applicator) error {
	var slice []*GroundBooking
	var object *GroundBooking

	if singular {
		var ok bool
		object, ok = maybeGroundBooking.(*GroundBooking)
		if !ok {
			object = new(GroundBooking)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGroundBooking)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGroundBooking))
			}
		}
	} else {
		s, ok := maybeGroundBooking.(*[]*GroundBooking)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGroundBooking)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGroundBooking))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &groundBookingR{}
		}
		if !queries.IsNil(object.GroundID) {
			args = append(args, object.GroundID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groundBookingR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GroundID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.GroundID) {
				args = append(args, obj.GroundID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`cricket_grounds`),
		qm.WhereIn(`cricket_grounds.ground_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CricketGround")
	}

	var resultSlice []*CricketGround
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CricketGround")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for cricket_grounds")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cricket_grounds")
	}

	if len(cricketGroundAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Ground = foreign
		if foreign.R == nil {
			foreign.R = &cricketGroundR{}
		}
		foreign.R.GroundGroundBookings = append(foreign.R.GroundGroundBookings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.GroundID, foreign.GroundID) {
				local.R.Ground = foreign
				if foreign.R == nil {
					foreign.R = &cricketGroundR{}
				}
				foreign.R.GroundGroundBookings = append(foreign.R.GroundGroundBookings, local)
				break
			}
		}
	}

	return nil
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (groundBookingL) LoadPlayer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGroundBooking interface{}, mods queries.Applicator) error {
	var slice []*GroundBooking
	var object *GroundBooking

	if singular {
		var ok bool
		object, ok = maybeGroundBooking.(*GroundBooking)
		if !ok {
			object = new(GroundBooking)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGroundBooking)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGroundBooking))
			}
		}
	} else {
		s, ok := maybeGroundBooking.(*[]*GroundBooking)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGroundBooking)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGroundBooking))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &groundBookingR{}
		}
		if !queries.IsNil(object.PlayerID) {
			args = append(args, object.PlayerID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groundBookingR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PlayerID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PlayerID) {
				args = append(args, obj.PlayerID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`cricket_players`),
		qm.WhereIn(`cricket_players.player_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CricketPlayer")
	}

	var resultSlice []*CricketPlayer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CricketPlayer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for cricket_players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cricket_players")
	}

	if len(cricketPlayerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &cricketPlayerR{}
		}
		foreign.R.PlayerGroundBookings = append(foreign.R.PlayerGroundBookings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PlayerID, foreign.PlayerID) {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &cricketPlayerR{}
				}
				foreign.R.PlayerGroundBookings = append(foreign.R.PlayerGroundBookings, local)
				break
			}
		}
	}

	return nil
}

// LoadTeam allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (groundBookingL) LoadTeam(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGroundBooking interface{}, mods queries.Applicator) error {
	var slice []*GroundBooking
	var object *GroundBooking

	if singular {
		var ok bool
		object, ok = maybeGroundBooking.(*GroundBooking)
		if !ok {
			object = new(GroundBooking)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGroundBooking)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGroundBooking))
			}
		}
	} else {
		s, ok := maybeGroundBooking.(*[]*GroundBooking)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGroundBooking)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGroundBooking))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &groundBookingR{}
		}
		if !queries.IsNil(object.TeamID) {
			args = append(args, object.TeamID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groundBookingR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TeamID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TeamID) {
				args = append(args, obj.TeamID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`cricket_teams`),
		qm.WhereIn(`cricket_teams.team_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CricketTeam")
	}

	var resultSlice []*CricketTeam
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CricketTeam")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for cricket_teams")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cricket_teams")
	}

	if len(cricketTeamAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Team = foreign
		if foreign.R == nil {
			foreign.R = &cricketTeamR{}
		}
		foreign.R.TeamGroundBookings = append(foreign.R.TeamGroundBookings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TeamID, foreign.TeamID) {
				local.R.Team = foreign
				if foreign.R == nil {
					foreign.R = &cricketTeamR{}
				}
				foreign.R.TeamGroundBookings = append(foreign.R.TeamGroundBookings, local)
				break
			}
		}
	}

	return nil
}

// LoadBookingPayments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (groundBookingL) LoadBookingPayments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGroundBooking interface{}, mods queries.Applicator) error {
	var slice []*GroundBooking
	var object *GroundBooking

	if singular {
		var ok bool
		object, ok = maybeGroundBooking.(*GroundBooking)
		if !ok {
			object = new(GroundBooking)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGroundBooking)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGroundBooking))
			}
		}
	} else {
		s, ok := maybeGroundBooking.(*[]*GroundBooking)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGroundBooking)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGroundBooking))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &groundBookingR{}
		}
		args = append(args, object.BookingID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groundBookingR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BookingID) {
					continue Outer
				}
			}

			args = append(args, obj.BookingID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`payments`),
		qm.WhereIn(`payments.booking_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load payments")
	}

	var resultSlice []*Payment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice payments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on payments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for payments")
	}

	if len(paymentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BookingPayments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &paymentR{}
			}
			foreign.R.Booking = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BookingID, foreign.BookingID) {
				local.R.BookingPayments = append(local.R.BookingPayments, foreign)
				if foreign.R == nil {
					foreign.R = &paymentR{}
				}
				foreign.R.Booking = local
				break
			}
		}
	}

	return nil
}

// SetGroundG of the groundBooking to the related item.
// Sets o.R.Ground to related.
// Adds o to related.R.GroundGroundBookings.
// Uses the global database handle.
func (o *GroundBooking) SetGroundG(ctx context.Context, insert bool, related *CricketGround) error {
	return o.SetGround(ctx, boil.GetContextDB(), insert, related)
}

// SetGround of the groundBooking to the related item.
// Sets o.R.Ground to related.
// Adds o to related.R.GroundGroundBookings.
func (o *GroundBooking) SetGround(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CricketGround) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ground_bookings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"ground_id"}),
		strmangle.WhereClause("\"", "\"", 2, groundBookingPrimaryKeyColumns),
	)
	values := []interface{}{related.GroundID, o.BookingID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.GroundID, related.GroundID)
	if o.R == nil {
		o.R = &groundBookingR{
			Ground: related,
		}
	} else {
		o.R.Ground = related
	}

	if related.R == nil {
		related.R = &cricketGroundR{
			GroundGroundBookings: GroundBookingSlice{o},
		}
	} else {
		related.R.GroundGroundBookings = append(related.R.GroundGroundBookings, o)
	}

	return nil
}

// RemoveGroundG relationship.
// Sets o.R.Ground to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *GroundBooking) RemoveGroundG(ctx context.Context, related *CricketGround) error {
	return o.RemoveGround(ctx, boil.GetContextDB(), related)
}

// RemoveGround relationship.
// Sets o.R.Ground to nil.
// Removes o from all passed in related items' relationships struct.
func (o *GroundBooking) RemoveGround(ctx context.Context, exec boil.ContextExecutor, related *CricketGround) error {
	var err error

	queries.SetScanner(&o.GroundID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("ground_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Ground = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.GroundGroundBookings {
		if queries.Equal(o.GroundID, ri.GroundID) {
			continue
		}

		ln := len(related.R.GroundGroundBookings)
		if ln > 1 && i < ln-1 {
			related.R.GroundGroundBookings[i] = related.R.GroundGroundBookings[ln-1]
		}
		related.R.GroundGroundBookings = related.R.GroundGroundBookings[:ln-1]
		break
	}
	return nil
}

// SetPlayerG of the groundBooking to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.PlayerGroundBookings.
// Uses the global database handle.
func (o *GroundBooking) SetPlayerG(ctx context.Context, insert bool, related *CricketPlayer) error {
	return o.SetPlayer(ctx, boil.GetContextDB(), insert, related)
}

// SetPlayer of the groundBooking to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.PlayerGroundBookings.
func (o *GroundBooking) SetPlayer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CricketPlayer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ground_bookings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, groundBookingPrimaryKeyColumns),
	)
	values := []interface{}{related.PlayerID, o.BookingID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PlayerID, related.PlayerID)
	if o.R == nil {
		o.R = &groundBookingR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &cricketPlayerR{
			PlayerGroundBookings: GroundBookingSlice{o},
		}
	} else {
		related.R.PlayerGroundBookings = append(related.R.PlayerGroundBookings, o)
	}

	return nil
}

// RemovePlayerG relationship.
// Sets o.R.Player to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *GroundBooking) RemovePlayerG(ctx context.Context, related *CricketPlayer) error {
	return o.RemovePlayer(ctx, boil.GetContextDB(), related)
}

// RemovePlayer relationship.
// Sets o.R.Player to nil.
// Removes o from all passed in related items' relationships struct.
func (o *GroundBooking) RemovePlayer(ctx context.Context, exec boil.ContextExecutor, related *CricketPlayer) error {
	var err error

	queries.SetScanner(&o.PlayerID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("player_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Player = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PlayerGroundBookings {
		if queries.Equal(o.PlayerID, ri.PlayerID) {
			continue
		}

		ln := len(related.R.PlayerGroundBookings)
		if ln > 1 && i < ln-1 {
			related.R.PlayerGroundBookings[i] = related.R.PlayerGroundBookings[ln-1]
		}
		related.R.PlayerGroundBookings = related.R.PlayerGroundBookings[:ln-1]
		break
	}
	return nil
}

// SetTeamG of the groundBooking to the related item.
// Sets o.R.Team to related.
// Adds o to related.R.TeamGroundBookings.
// Uses the global database handle.
func (o *GroundBooking) SetTeamG(ctx context.Context, insert bool, related *CricketTeam) error {
	return o.SetTeam(ctx, boil.GetContextDB(), insert, related)
}

// SetTeam of the groundBooking to the related item.
// Sets o.R.Team to related.
// Adds o to related.R.TeamGroundBookings.
func (o *GroundBooking) SetTeam(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CricketTeam) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ground_bookings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"team_id"}),
		strmangle.WhereClause("\"", "\"", 2, groundBookingPrimaryKeyColumns),
	)
	values := []interface{}{related.TeamID, o.BookingID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TeamID, related.TeamID)
	if o.R == nil {
		o.R = &groundBookingR{
			Team: related,
		}
	} else {
		o.R.Team = related
	}

	if related.R == nil {
		related.R = &cricketTeamR{
			TeamGroundBookings: GroundBookingSlice{o},
		}
	} else {
		related.R.TeamGroundBookings = append(related.R.TeamGroundBookings, o)
	}

	return nil
}

// RemoveTeamG relationship.
// Sets o.R.Team to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *GroundBooking) RemoveTeamG(ctx context.Context, related *CricketTeam) error {
	return o.RemoveTeam(ctx, boil.GetContextDB(), related)
}

// RemoveTeam relationship.
// Sets o.R.Team to nil.
// Removes o from all passed in related items' relationships struct.
func (o *GroundBooking) RemoveTeam(ctx context.Context, exec boil.ContextExecutor, related *CricketTeam) error {
	var err error

	queries.SetScanner(&o.TeamID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("team_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Team = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TeamGroundBookings {
		if queries.Equal(o.TeamID, ri.TeamID) {
			continue
		}

		ln := len(related.R.TeamGroundBookings)
		if ln > 1 && i < ln-1 {
			related.R.TeamGroundBookings[i] = related.R.TeamGroundBookings[ln-1]
		}
		related.R.TeamGroundBookings = related.R.TeamGroundBookings[:ln-1]
		break
	}
	return nil
}

// AddBookingPaymentsG adds the given related objects to the existing relationships
// of the ground_booking, optionally inserting them as new records.
// Appends related to o.R.BookingPayments.
// Sets related.R.Booking appropriately.
// Uses the global database handle.
func (o *GroundBooking) AddBookingPaymentsG(ctx context.Context, insert bool, related ...*Payment) error {
	return o.AddBookingPayments(ctx, boil.GetContextDB(), insert, related...)
}

// AddBookingPayments adds the given related objects to the existing relationships
// of the ground_booking, optionally inserting them as new records.
// Appends related to o.R.BookingPayments.
// Sets related.R.Booking appropriately.
func (o *GroundBooking) AddBookingPayments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Payment) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BookingID, o.BookingID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"payments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"booking_id"}),
				strmangle.WhereClause("\"", "\"", 2, paymentPrimaryKeyColumns),
			)
			values := []interface{}{o.BookingID, rel.PaymentID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BookingID, o.BookingID)
		}
	}

	if o.R == nil {
		o.R = &groundBookingR{
			BookingPayments: related,
		}
	} else {
		o.R.BookingPayments = append(o.R.BookingPayments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &paymentR{
				Booking: o,
			}
		} else {
			rel.R.Booking = o
		}
	}
	return nil
}

// SetBookingPaymentsG removes all previously related items of the
// ground_booking replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Booking's BookingPayments accordingly.
// Replaces o.R.BookingPayments with related.
// Sets related.R.Booking's BookingPayments accordingly.
// Uses the global database handle.
func (o *GroundBooking) SetBookingPaymentsG(ctx context.Context, insert bool, related ...*Payment) error {
	return o.SetBookingPayments(ctx, boil.GetContextDB(), insert, related...)
}

// SetBookingPayments removes all previously related items of the
// ground_booking replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Booking's BookingPayments accordingly.
// Replaces o.R.BookingPayments with related.
// Sets related.R.Booking's BookingPayments accordingly.
func (o *GroundBooking) SetBookingPayments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Payment) error {
	query := "update \"payments\" set \"booking_id\" = null where \"booking_id\" = $1"
	values := []interface{}{o.BookingID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BookingPayments {
			queries.SetScanner(&rel.BookingID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Booking = nil
		}
		o.R.BookingPayments = nil
	}

	return o.AddBookingPayments(ctx, exec, insert, related...)
}

// RemoveBookingPaymentsG relationships from objects passed in.
// Removes related items from R.BookingPayments (uses pointer comparison, removal does not keep order)
// Sets related.R.Booking.
// Uses the global database handle.
func (o *GroundBooking) RemoveBookingPaymentsG(ctx context.Context, related ...*Payment) error {
	return o.RemoveBookingPayments(ctx, boil.GetContextDB(), related...)
}

// RemoveBookingPayments relationships from objects passed in.
// Removes related items from R.BookingPayments (uses pointer comparison, removal does not keep order)
// Sets related.R.Booking.
func (o *GroundBooking) RemoveBookingPayments(ctx context.Context, exec boil.ContextExecutor, related ...*Payment) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BookingID, nil)
		if rel.R != nil {
			rel.R.Booking = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("booking_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BookingPayments {
			if rel != ri {
				continue
			}

			ln := len(o.R.BookingPayments)
			if ln > 1 && i < ln-1 {
				o.R.BookingPayments[i] = o.R.BookingPayments[ln-1]
			}
			o.R.BookingPayments = o.R.BookingPayments[:ln-1]
			break
		}
	}

	return nil
}

// GroundBookings retrieves all the records using an executor.
func GroundBookings(mods ...qm.QueryMod) groundBookingQuery {
	mods = append(mods, qm.From("\"ground_bookings\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"ground_bookings\".*"})
	}

	return groundBookingQuery{q}
}

// FindGroundBookingG retrieves a single record by ID.
func FindGroundBookingG(ctx context.Context, bookingID int, selectCols ...string) (*GroundBooking, error) {
	return FindGroundBooking(ctx, boil.GetContextDB(), bookingID, selectCols...)
}

// FindGroundBooking retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGroundBooking(ctx context.Context, exec boil.ContextExecutor, bookingID int, selectCols ...string) (*GroundBooking, error) {
	groundBookingObj := &GroundBooking{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ground_bookings\" where \"booking_id\"=$1", sel,
	)

	q := queries.Raw(query, bookingID)

	err := q.Bind(ctx, exec, groundBookingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ground_bookings")
	}

	if err = groundBookingObj.doAfterSelectHooks(ctx, exec); err != nil {
		return groundBookingObj, err
	}

	return groundBookingObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *GroundBooking) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GroundBooking) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ground_bookings provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(groundBookingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	groundBookingInsertCacheMut.RLock()
	cache, cached := groundBookingInsertCache[key]
	groundBookingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			groundBookingAllColumns,
			groundBookingColumnsWithDefault,
			groundBookingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(groundBookingType, groundBookingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(groundBookingType, groundBookingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ground_bookings\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ground_bookings\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ground_bookings")
	}

	if !cached {
		groundBookingInsertCacheMut.Lock()
		groundBookingInsertCache[key] = cache
		groundBookingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single GroundBooking record using the global executor.
// See Update for more documentation.
func (o *GroundBooking) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the GroundBooking.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GroundBooking) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	groundBookingUpdateCacheMut.RLock()
	cache, cached := groundBookingUpdateCache[key]
	groundBookingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			groundBookingAllColumns,
			groundBookingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ground_bookings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ground_bookings\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, groundBookingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(groundBookingType, groundBookingMapping, append(wl, groundBookingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ground_bookings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ground_bookings")
	}

	if !cached {
		groundBookingUpdateCacheMut.Lock()
		groundBookingUpdateCache[key] = cache
		groundBookingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q groundBookingQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q groundBookingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ground_bookings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ground_bookings")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o GroundBookingSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GroundBookingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groundBookingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ground_bookings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, groundBookingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in groundBooking slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all groundBooking")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *GroundBooking) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GroundBooking) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ground_bookings provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(groundBookingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	groundBookingUpsertCacheMut.RLock()
	cache, cached := groundBookingUpsertCache[key]
	groundBookingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			groundBookingAllColumns,
			groundBookingColumnsWithDefault,
			groundBookingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			groundBookingAllColumns,
			groundBookingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert ground_bookings, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(groundBookingPrimaryKeyColumns))
			copy(conflict, groundBookingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"ground_bookings\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(groundBookingType, groundBookingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(groundBookingType, groundBookingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert ground_bookings")
	}

	if !cached {
		groundBookingUpsertCacheMut.Lock()
		groundBookingUpsertCache[key] = cache
		groundBookingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single GroundBooking record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *GroundBooking) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single GroundBooking record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GroundBooking) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GroundBooking provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), groundBookingPrimaryKeyMapping)
	sql := "DELETE FROM \"ground_bookings\" WHERE \"booking_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ground_bookings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ground_bookings")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q groundBookingQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q groundBookingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no groundBookingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ground_bookings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ground_bookings")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o GroundBookingSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GroundBookingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(groundBookingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groundBookingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ground_bookings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, groundBookingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from groundBooking slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ground_bookings")
	}

	if len(groundBookingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *GroundBooking) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no GroundBooking provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GroundBooking) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGroundBooking(ctx, exec, o.BookingID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GroundBookingSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty GroundBookingSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GroundBookingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GroundBookingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groundBookingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ground_bookings\".* FROM \"ground_bookings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, groundBookingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GroundBookingSlice")
	}

	*o = slice

	return nil
}

// GroundBookingExistsG checks if the GroundBooking row exists.
func GroundBookingExistsG(ctx context.Context, bookingID int) (bool, error) {
	return GroundBookingExists(ctx, boil.GetContextDB(), bookingID)
}

// GroundBookingExists checks if the GroundBooking row exists.
func GroundBookingExists(ctx context.Context, exec boil.ContextExecutor, bookingID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ground_bookings\" where \"booking_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, bookingID)
	}
	row := exec.QueryRowContext(ctx, sql, bookingID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ground_bookings exists")
	}

	return exists, nil
}

// Exists checks if the GroundBooking row exists.
func (o *GroundBooking) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GroundBookingExists(ctx, exec, o.BookingID)
}
