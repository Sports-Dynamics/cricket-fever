// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql/driver"
	"encoding/json"
	"strconv"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/null/v8/convert"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/strmangle"
)

// M type is for providing columns and column values to UpdateAll.
type M map[string]interface{}

// ErrSyncFail occurs during insert when the record could not be retrieved in
// order to populate default value information. This usually happens when LastInsertId
// fails or there was a primary key configuration that was not resolvable.
var ErrSyncFail = errors.New("models: failed to synchronize data after insert")

type insertCache struct {
	query        string
	retQuery     string
	valueMapping []uint64
	retMapping   []uint64
}

type updateCache struct {
	query        string
	valueMapping []uint64
}

func makeCacheKey(cols boil.Columns, nzDefaults []string) string {
	buf := strmangle.GetBuffer()

	buf.WriteString(strconv.Itoa(cols.Kind))
	for _, w := range cols.Cols {
		buf.WriteString(w)
	}

	if len(nzDefaults) != 0 {
		buf.WriteByte('.')
	}
	for _, nz := range nzDefaults {
		buf.WriteString(nz)
	}

	str := buf.String()
	strmangle.PutBuffer(buf)
	return str
}

type CricketRole string

// Enum values for CricketRole
const (
	CricketRoleBatsman           CricketRole = "Batsman"
	CricketRoleBowler            CricketRole = "Bowler"
	CricketRoleBatsmanAllRounder CricketRole = "Batsman AllRounder"
	CricketRoleBowlingAllRounder CricketRole = "Bowling AllRounder"
	CricketRoleWicketKeeper      CricketRole = "Wicket Keeper"
)

func AllCricketRole() []CricketRole {
	return []CricketRole{
		CricketRoleBatsman,
		CricketRoleBowler,
		CricketRoleBatsmanAllRounder,
		CricketRoleBowlingAllRounder,
		CricketRoleWicketKeeper,
	}
}

func (e CricketRole) IsValid() error {
	switch e {
	case CricketRoleBatsman, CricketRoleBowler, CricketRoleBatsmanAllRounder, CricketRoleBowlingAllRounder, CricketRoleWicketKeeper:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e CricketRole) String() string {
	return string(e)
}

// NullCricketRole is a nullable CricketRole enum type. It supports SQL and JSON serialization.
type NullCricketRole struct {
	Val   CricketRole
	Valid bool
}

// NullCricketRoleFrom creates a new CricketRole that will never be blank.
func NullCricketRoleFrom(v CricketRole) NullCricketRole {
	return NewNullCricketRole(v, true)
}

// NullCricketRoleFromPtr creates a new NullCricketRole that be null if s is nil.
func NullCricketRoleFromPtr(v *CricketRole) NullCricketRole {
	if v == nil {
		return NewNullCricketRole("", false)
	}
	return NewNullCricketRole(*v, true)
}

// NewNullCricketRole creates a new NullCricketRole
func NewNullCricketRole(v CricketRole, valid bool) NullCricketRole {
	return NullCricketRole{
		Val:   v,
		Valid: valid,
	}
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *NullCricketRole) UnmarshalJSON(data []byte) error {
	if bytes.Equal(data, null.NullBytes) {
		e.Val = ""
		e.Valid = false
		return nil
	}

	if err := json.Unmarshal(data, &e.Val); err != nil {
		return err
	}

	e.Valid = true
	return nil
}

// MarshalJSON implements json.Marshaler.
func (e NullCricketRole) MarshalJSON() ([]byte, error) {
	if !e.Valid {
		return null.NullBytes, nil
	}
	return json.Marshal(e.Val)
}

// MarshalText implements encoding.TextMarshaler.
func (e NullCricketRole) MarshalText() ([]byte, error) {
	if !e.Valid {
		return []byte{}, nil
	}
	return []byte(e.Val), nil
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (e *NullCricketRole) UnmarshalText(text []byte) error {
	if text == nil || len(text) == 0 {
		e.Valid = false
		return nil
	}

	e.Val = CricketRole(text)
	e.Valid = true
	return nil
}

// SetValid changes this NullCricketRole value and also sets it to be non-null.
func (e *NullCricketRole) SetValid(v CricketRole) {
	e.Val = v
	e.Valid = true
}

// Ptr returns a pointer to this NullCricketRole value, or a nil pointer if this NullCricketRole is null.
func (e NullCricketRole) Ptr() *CricketRole {
	if !e.Valid {
		return nil
	}
	return &e.Val
}

// IsZero returns true for null types.
func (e NullCricketRole) IsZero() bool {
	return !e.Valid
}

// Scan implements the Scanner interface.
func (e *NullCricketRole) Scan(value interface{}) error {
	if value == nil {
		e.Val, e.Valid = "", false
		return nil
	}
	e.Valid = true
	return convert.ConvertAssign((*string)(&e.Val), value)
}

// Value implements the driver Valuer interface.
func (e NullCricketRole) Value() (driver.Value, error) {
	if !e.Valid {
		return nil, nil
	}
	return string(e.Val), nil
}

type CricketBattingPosition string

// Enum values for CricketBattingPosition
const (
	CricketBattingPositionOpeningBatsman   CricketBattingPosition = "Opening Batsman"
	CricketBattingPositionTopOrder         CricketBattingPosition = "Top Order"
	CricketBattingPositionMiddleOrder      CricketBattingPosition = "Middle Order"
	CricketBattingPositionLowerMiddleOrder CricketBattingPosition = "Lower Middle Order"
	CricketBattingPositionTailender        CricketBattingPosition = "Tailender"
)

func AllCricketBattingPosition() []CricketBattingPosition {
	return []CricketBattingPosition{
		CricketBattingPositionOpeningBatsman,
		CricketBattingPositionTopOrder,
		CricketBattingPositionMiddleOrder,
		CricketBattingPositionLowerMiddleOrder,
		CricketBattingPositionTailender,
	}
}

func (e CricketBattingPosition) IsValid() error {
	switch e {
	case CricketBattingPositionOpeningBatsman, CricketBattingPositionTopOrder, CricketBattingPositionMiddleOrder, CricketBattingPositionLowerMiddleOrder, CricketBattingPositionTailender:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e CricketBattingPosition) String() string {
	return string(e)
}

// NullCricketBattingPosition is a nullable CricketBattingPosition enum type. It supports SQL and JSON serialization.
type NullCricketBattingPosition struct {
	Val   CricketBattingPosition
	Valid bool
}

// NullCricketBattingPositionFrom creates a new CricketBattingPosition that will never be blank.
func NullCricketBattingPositionFrom(v CricketBattingPosition) NullCricketBattingPosition {
	return NewNullCricketBattingPosition(v, true)
}

// NullCricketBattingPositionFromPtr creates a new NullCricketBattingPosition that be null if s is nil.
func NullCricketBattingPositionFromPtr(v *CricketBattingPosition) NullCricketBattingPosition {
	if v == nil {
		return NewNullCricketBattingPosition("", false)
	}
	return NewNullCricketBattingPosition(*v, true)
}

// NewNullCricketBattingPosition creates a new NullCricketBattingPosition
func NewNullCricketBattingPosition(v CricketBattingPosition, valid bool) NullCricketBattingPosition {
	return NullCricketBattingPosition{
		Val:   v,
		Valid: valid,
	}
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *NullCricketBattingPosition) UnmarshalJSON(data []byte) error {
	if bytes.Equal(data, null.NullBytes) {
		e.Val = ""
		e.Valid = false
		return nil
	}

	if err := json.Unmarshal(data, &e.Val); err != nil {
		return err
	}

	e.Valid = true
	return nil
}

// MarshalJSON implements json.Marshaler.
func (e NullCricketBattingPosition) MarshalJSON() ([]byte, error) {
	if !e.Valid {
		return null.NullBytes, nil
	}
	return json.Marshal(e.Val)
}

// MarshalText implements encoding.TextMarshaler.
func (e NullCricketBattingPosition) MarshalText() ([]byte, error) {
	if !e.Valid {
		return []byte{}, nil
	}
	return []byte(e.Val), nil
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (e *NullCricketBattingPosition) UnmarshalText(text []byte) error {
	if text == nil || len(text) == 0 {
		e.Valid = false
		return nil
	}

	e.Val = CricketBattingPosition(text)
	e.Valid = true
	return nil
}

// SetValid changes this NullCricketBattingPosition value and also sets it to be non-null.
func (e *NullCricketBattingPosition) SetValid(v CricketBattingPosition) {
	e.Val = v
	e.Valid = true
}

// Ptr returns a pointer to this NullCricketBattingPosition value, or a nil pointer if this NullCricketBattingPosition is null.
func (e NullCricketBattingPosition) Ptr() *CricketBattingPosition {
	if !e.Valid {
		return nil
	}
	return &e.Val
}

// IsZero returns true for null types.
func (e NullCricketBattingPosition) IsZero() bool {
	return !e.Valid
}

// Scan implements the Scanner interface.
func (e *NullCricketBattingPosition) Scan(value interface{}) error {
	if value == nil {
		e.Val, e.Valid = "", false
		return nil
	}
	e.Valid = true
	return convert.ConvertAssign((*string)(&e.Val), value)
}

// Value implements the driver Valuer interface.
func (e NullCricketBattingPosition) Value() (driver.Value, error) {
	if !e.Valid {
		return nil, nil
	}
	return string(e.Val), nil
}

type CricketBowlerType string

// Enum values for CricketBowlerType
const (
	CricketBowlerTypeFastBowler       CricketBowlerType = "Fast Bowler"
	CricketBowlerTypeMediumFastBowler CricketBowlerType = "Medium Fast Bowler"
	CricketBowlerTypeMediumPacer      CricketBowlerType = "Medium Pacer"
	CricketBowlerTypeSpinBowler       CricketBowlerType = "Spin Bowler"
	CricketBowlerTypeLegSpinner       CricketBowlerType = "Leg Spinner"
	CricketBowlerTypeOFFSpinner       CricketBowlerType = "Off Spinner"
	CricketBowlerTypeChinaMen         CricketBowlerType = "ChinaMen"
)

func AllCricketBowlerType() []CricketBowlerType {
	return []CricketBowlerType{
		CricketBowlerTypeFastBowler,
		CricketBowlerTypeMediumFastBowler,
		CricketBowlerTypeMediumPacer,
		CricketBowlerTypeSpinBowler,
		CricketBowlerTypeLegSpinner,
		CricketBowlerTypeOFFSpinner,
		CricketBowlerTypeChinaMen,
	}
}

func (e CricketBowlerType) IsValid() error {
	switch e {
	case CricketBowlerTypeFastBowler, CricketBowlerTypeMediumFastBowler, CricketBowlerTypeMediumPacer, CricketBowlerTypeSpinBowler, CricketBowlerTypeLegSpinner, CricketBowlerTypeOFFSpinner, CricketBowlerTypeChinaMen:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e CricketBowlerType) String() string {
	return string(e)
}

// NullCricketBowlerType is a nullable CricketBowlerType enum type. It supports SQL and JSON serialization.
type NullCricketBowlerType struct {
	Val   CricketBowlerType
	Valid bool
}

// NullCricketBowlerTypeFrom creates a new CricketBowlerType that will never be blank.
func NullCricketBowlerTypeFrom(v CricketBowlerType) NullCricketBowlerType {
	return NewNullCricketBowlerType(v, true)
}

// NullCricketBowlerTypeFromPtr creates a new NullCricketBowlerType that be null if s is nil.
func NullCricketBowlerTypeFromPtr(v *CricketBowlerType) NullCricketBowlerType {
	if v == nil {
		return NewNullCricketBowlerType("", false)
	}
	return NewNullCricketBowlerType(*v, true)
}

// NewNullCricketBowlerType creates a new NullCricketBowlerType
func NewNullCricketBowlerType(v CricketBowlerType, valid bool) NullCricketBowlerType {
	return NullCricketBowlerType{
		Val:   v,
		Valid: valid,
	}
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *NullCricketBowlerType) UnmarshalJSON(data []byte) error {
	if bytes.Equal(data, null.NullBytes) {
		e.Val = ""
		e.Valid = false
		return nil
	}

	if err := json.Unmarshal(data, &e.Val); err != nil {
		return err
	}

	e.Valid = true
	return nil
}

// MarshalJSON implements json.Marshaler.
func (e NullCricketBowlerType) MarshalJSON() ([]byte, error) {
	if !e.Valid {
		return null.NullBytes, nil
	}
	return json.Marshal(e.Val)
}

// MarshalText implements encoding.TextMarshaler.
func (e NullCricketBowlerType) MarshalText() ([]byte, error) {
	if !e.Valid {
		return []byte{}, nil
	}
	return []byte(e.Val), nil
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (e *NullCricketBowlerType) UnmarshalText(text []byte) error {
	if text == nil || len(text) == 0 {
		e.Valid = false
		return nil
	}

	e.Val = CricketBowlerType(text)
	e.Valid = true
	return nil
}

// SetValid changes this NullCricketBowlerType value and also sets it to be non-null.
func (e *NullCricketBowlerType) SetValid(v CricketBowlerType) {
	e.Val = v
	e.Valid = true
}

// Ptr returns a pointer to this NullCricketBowlerType value, or a nil pointer if this NullCricketBowlerType is null.
func (e NullCricketBowlerType) Ptr() *CricketBowlerType {
	if !e.Valid {
		return nil
	}
	return &e.Val
}

// IsZero returns true for null types.
func (e NullCricketBowlerType) IsZero() bool {
	return !e.Valid
}

// Scan implements the Scanner interface.
func (e *NullCricketBowlerType) Scan(value interface{}) error {
	if value == nil {
		e.Val, e.Valid = "", false
		return nil
	}
	e.Valid = true
	return convert.ConvertAssign((*string)(&e.Val), value)
}

// Value implements the driver Valuer interface.
func (e NullCricketBowlerType) Value() (driver.Value, error) {
	if !e.Valid {
		return nil, nil
	}
	return string(e.Val), nil
}

type CricketFieldingPosition string

// Enum values for CricketFieldingPosition
const (
	CricketFieldingPositionSlip          CricketFieldingPosition = "Slip"
	CricketFieldingPositionGully         CricketFieldingPosition = "Gully"
	CricketFieldingPositionThirdMan      CricketFieldingPosition = "Third Man"
	CricketFieldingPositionFineLeg       CricketFieldingPosition = "Fine Leg"
	CricketFieldingPositionDeepSquareLeg CricketFieldingPosition = "Deep Square Leg"
	CricketFieldingPositionDeepMidwicket CricketFieldingPosition = "Deep Midwicket"
	CricketFieldingPositionLongON        CricketFieldingPosition = "Long On"
	CricketFieldingPositionLongOFF       CricketFieldingPosition = "Long Off"
	CricketFieldingPositionCover         CricketFieldingPosition = "Cover"
	CricketFieldingPositionExtraCover    CricketFieldingPosition = "Extra Cover"
	CricketFieldingPositionPoint         CricketFieldingPosition = "Point"
	CricketFieldingPositionSquareLeg     CricketFieldingPosition = "Square Leg"
	CricketFieldingPositionMidON         CricketFieldingPosition = "Mid On"
	CricketFieldingPositionMidOFF        CricketFieldingPosition = "Mid Off"
	CricketFieldingPositionMidwicket     CricketFieldingPosition = "Midwicket"
	CricketFieldingPositionShortLeg      CricketFieldingPosition = "Short Leg"
	CricketFieldingPositionLegSlip       CricketFieldingPosition = "Leg Slip"
	CricketFieldingPositionShortFineLeg  CricketFieldingPosition = "Short Fine Leg"
)

func AllCricketFieldingPosition() []CricketFieldingPosition {
	return []CricketFieldingPosition{
		CricketFieldingPositionSlip,
		CricketFieldingPositionGully,
		CricketFieldingPositionThirdMan,
		CricketFieldingPositionFineLeg,
		CricketFieldingPositionDeepSquareLeg,
		CricketFieldingPositionDeepMidwicket,
		CricketFieldingPositionLongON,
		CricketFieldingPositionLongOFF,
		CricketFieldingPositionCover,
		CricketFieldingPositionExtraCover,
		CricketFieldingPositionPoint,
		CricketFieldingPositionSquareLeg,
		CricketFieldingPositionMidON,
		CricketFieldingPositionMidOFF,
		CricketFieldingPositionMidwicket,
		CricketFieldingPositionShortLeg,
		CricketFieldingPositionLegSlip,
		CricketFieldingPositionShortFineLeg,
	}
}

func (e CricketFieldingPosition) IsValid() error {
	switch e {
	case CricketFieldingPositionSlip, CricketFieldingPositionGully, CricketFieldingPositionThirdMan, CricketFieldingPositionFineLeg, CricketFieldingPositionDeepSquareLeg, CricketFieldingPositionDeepMidwicket, CricketFieldingPositionLongON, CricketFieldingPositionLongOFF, CricketFieldingPositionCover, CricketFieldingPositionExtraCover, CricketFieldingPositionPoint, CricketFieldingPositionSquareLeg, CricketFieldingPositionMidON, CricketFieldingPositionMidOFF, CricketFieldingPositionMidwicket, CricketFieldingPositionShortLeg, CricketFieldingPositionLegSlip, CricketFieldingPositionShortFineLeg:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e CricketFieldingPosition) String() string {
	return string(e)
}

// NullCricketFieldingPosition is a nullable CricketFieldingPosition enum type. It supports SQL and JSON serialization.
type NullCricketFieldingPosition struct {
	Val   CricketFieldingPosition
	Valid bool
}

// NullCricketFieldingPositionFrom creates a new CricketFieldingPosition that will never be blank.
func NullCricketFieldingPositionFrom(v CricketFieldingPosition) NullCricketFieldingPosition {
	return NewNullCricketFieldingPosition(v, true)
}

// NullCricketFieldingPositionFromPtr creates a new NullCricketFieldingPosition that be null if s is nil.
func NullCricketFieldingPositionFromPtr(v *CricketFieldingPosition) NullCricketFieldingPosition {
	if v == nil {
		return NewNullCricketFieldingPosition("", false)
	}
	return NewNullCricketFieldingPosition(*v, true)
}

// NewNullCricketFieldingPosition creates a new NullCricketFieldingPosition
func NewNullCricketFieldingPosition(v CricketFieldingPosition, valid bool) NullCricketFieldingPosition {
	return NullCricketFieldingPosition{
		Val:   v,
		Valid: valid,
	}
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *NullCricketFieldingPosition) UnmarshalJSON(data []byte) error {
	if bytes.Equal(data, null.NullBytes) {
		e.Val = ""
		e.Valid = false
		return nil
	}

	if err := json.Unmarshal(data, &e.Val); err != nil {
		return err
	}

	e.Valid = true
	return nil
}

// MarshalJSON implements json.Marshaler.
func (e NullCricketFieldingPosition) MarshalJSON() ([]byte, error) {
	if !e.Valid {
		return null.NullBytes, nil
	}
	return json.Marshal(e.Val)
}

// MarshalText implements encoding.TextMarshaler.
func (e NullCricketFieldingPosition) MarshalText() ([]byte, error) {
	if !e.Valid {
		return []byte{}, nil
	}
	return []byte(e.Val), nil
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (e *NullCricketFieldingPosition) UnmarshalText(text []byte) error {
	if text == nil || len(text) == 0 {
		e.Valid = false
		return nil
	}

	e.Val = CricketFieldingPosition(text)
	e.Valid = true
	return nil
}

// SetValid changes this NullCricketFieldingPosition value and also sets it to be non-null.
func (e *NullCricketFieldingPosition) SetValid(v CricketFieldingPosition) {
	e.Val = v
	e.Valid = true
}

// Ptr returns a pointer to this NullCricketFieldingPosition value, or a nil pointer if this NullCricketFieldingPosition is null.
func (e NullCricketFieldingPosition) Ptr() *CricketFieldingPosition {
	if !e.Valid {
		return nil
	}
	return &e.Val
}

// IsZero returns true for null types.
func (e NullCricketFieldingPosition) IsZero() bool {
	return !e.Valid
}

// Scan implements the Scanner interface.
func (e *NullCricketFieldingPosition) Scan(value interface{}) error {
	if value == nil {
		e.Val, e.Valid = "", false
		return nil
	}
	e.Valid = true
	return convert.ConvertAssign((*string)(&e.Val), value)
}

// Value implements the driver Valuer interface.
func (e NullCricketFieldingPosition) Value() (driver.Value, error) {
	if !e.Valid {
		return nil, nil
	}
	return string(e.Val), nil
}
