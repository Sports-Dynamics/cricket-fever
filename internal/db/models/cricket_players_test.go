// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCricketPlayers(t *testing.T) {
	t.Parallel()

	query := CricketPlayers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCricketPlayersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketPlayer{}
	if err = randomize.Struct(seed, o, cricketPlayerDBTypes, true, cricketPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CricketPlayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCricketPlayersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketPlayer{}
	if err = randomize.Struct(seed, o, cricketPlayerDBTypes, true, cricketPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CricketPlayers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CricketPlayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCricketPlayersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketPlayer{}
	if err = randomize.Struct(seed, o, cricketPlayerDBTypes, true, cricketPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CricketPlayerSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CricketPlayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCricketPlayersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketPlayer{}
	if err = randomize.Struct(seed, o, cricketPlayerDBTypes, true, cricketPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CricketPlayerExists(ctx, tx, o.PlayerID)
	if err != nil {
		t.Errorf("Unable to check if CricketPlayer exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CricketPlayerExists to return true, but got false.")
	}
}

func testCricketPlayersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketPlayer{}
	if err = randomize.Struct(seed, o, cricketPlayerDBTypes, true, cricketPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	cricketPlayerFound, err := FindCricketPlayer(ctx, tx, o.PlayerID)
	if err != nil {
		t.Error(err)
	}

	if cricketPlayerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCricketPlayersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketPlayer{}
	if err = randomize.Struct(seed, o, cricketPlayerDBTypes, true, cricketPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CricketPlayers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCricketPlayersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketPlayer{}
	if err = randomize.Struct(seed, o, cricketPlayerDBTypes, true, cricketPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CricketPlayers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCricketPlayersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cricketPlayerOne := &CricketPlayer{}
	cricketPlayerTwo := &CricketPlayer{}
	if err = randomize.Struct(seed, cricketPlayerOne, cricketPlayerDBTypes, false, cricketPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketPlayer struct: %s", err)
	}
	if err = randomize.Struct(seed, cricketPlayerTwo, cricketPlayerDBTypes, false, cricketPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = cricketPlayerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = cricketPlayerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CricketPlayers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCricketPlayersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	cricketPlayerOne := &CricketPlayer{}
	cricketPlayerTwo := &CricketPlayer{}
	if err = randomize.Struct(seed, cricketPlayerOne, cricketPlayerDBTypes, false, cricketPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketPlayer struct: %s", err)
	}
	if err = randomize.Struct(seed, cricketPlayerTwo, cricketPlayerDBTypes, false, cricketPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = cricketPlayerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = cricketPlayerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CricketPlayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func cricketPlayerBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *CricketPlayer) error {
	*o = CricketPlayer{}
	return nil
}

func cricketPlayerAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *CricketPlayer) error {
	*o = CricketPlayer{}
	return nil
}

func cricketPlayerAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *CricketPlayer) error {
	*o = CricketPlayer{}
	return nil
}

func cricketPlayerBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CricketPlayer) error {
	*o = CricketPlayer{}
	return nil
}

func cricketPlayerAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CricketPlayer) error {
	*o = CricketPlayer{}
	return nil
}

func cricketPlayerBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CricketPlayer) error {
	*o = CricketPlayer{}
	return nil
}

func cricketPlayerAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CricketPlayer) error {
	*o = CricketPlayer{}
	return nil
}

func cricketPlayerBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CricketPlayer) error {
	*o = CricketPlayer{}
	return nil
}

func cricketPlayerAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CricketPlayer) error {
	*o = CricketPlayer{}
	return nil
}

func testCricketPlayersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &CricketPlayer{}
	o := &CricketPlayer{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, cricketPlayerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CricketPlayer object: %s", err)
	}

	AddCricketPlayerHook(boil.BeforeInsertHook, cricketPlayerBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	cricketPlayerBeforeInsertHooks = []CricketPlayerHook{}

	AddCricketPlayerHook(boil.AfterInsertHook, cricketPlayerAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	cricketPlayerAfterInsertHooks = []CricketPlayerHook{}

	AddCricketPlayerHook(boil.AfterSelectHook, cricketPlayerAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	cricketPlayerAfterSelectHooks = []CricketPlayerHook{}

	AddCricketPlayerHook(boil.BeforeUpdateHook, cricketPlayerBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	cricketPlayerBeforeUpdateHooks = []CricketPlayerHook{}

	AddCricketPlayerHook(boil.AfterUpdateHook, cricketPlayerAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	cricketPlayerAfterUpdateHooks = []CricketPlayerHook{}

	AddCricketPlayerHook(boil.BeforeDeleteHook, cricketPlayerBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	cricketPlayerBeforeDeleteHooks = []CricketPlayerHook{}

	AddCricketPlayerHook(boil.AfterDeleteHook, cricketPlayerAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	cricketPlayerAfterDeleteHooks = []CricketPlayerHook{}

	AddCricketPlayerHook(boil.BeforeUpsertHook, cricketPlayerBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	cricketPlayerBeforeUpsertHooks = []CricketPlayerHook{}

	AddCricketPlayerHook(boil.AfterUpsertHook, cricketPlayerAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	cricketPlayerAfterUpsertHooks = []CricketPlayerHook{}
}

func testCricketPlayersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketPlayer{}
	if err = randomize.Struct(seed, o, cricketPlayerDBTypes, true, cricketPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CricketPlayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCricketPlayersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketPlayer{}
	if err = randomize.Struct(seed, o, cricketPlayerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CricketPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(cricketPlayerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CricketPlayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCricketPlayerToManyPlayerTeamPlayers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CricketPlayer
	var b, c TeamPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cricketPlayerDBTypes, true, cricketPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketPlayer struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, teamPlayerDBTypes, false, teamPlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teamPlayerDBTypes, false, teamPlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PlayerID = a.PlayerID
	c.PlayerID = a.PlayerID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PlayerTeamPlayers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PlayerID == b.PlayerID {
			bFound = true
		}
		if v.PlayerID == c.PlayerID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CricketPlayerSlice{&a}
	if err = a.L.LoadPlayerTeamPlayers(ctx, tx, false, (*[]*CricketPlayer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlayerTeamPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PlayerTeamPlayers = nil
	if err = a.L.LoadPlayerTeamPlayers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlayerTeamPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCricketPlayerToManyAddOpPlayerTeamPlayers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CricketPlayer
	var b, c, d, e TeamPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cricketPlayerDBTypes, false, strmangle.SetComplement(cricketPlayerPrimaryKeyColumns, cricketPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TeamPlayer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teamPlayerDBTypes, false, strmangle.SetComplement(teamPlayerPrimaryKeyColumns, teamPlayerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TeamPlayer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPlayerTeamPlayers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.PlayerID != first.PlayerID {
			t.Error("foreign key was wrong value", a.PlayerID, first.PlayerID)
		}
		if a.PlayerID != second.PlayerID {
			t.Error("foreign key was wrong value", a.PlayerID, second.PlayerID)
		}

		if first.R.Player != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Player != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PlayerTeamPlayers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PlayerTeamPlayers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PlayerTeamPlayers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCricketPlayersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketPlayer{}
	if err = randomize.Struct(seed, o, cricketPlayerDBTypes, true, cricketPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCricketPlayersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketPlayer{}
	if err = randomize.Struct(seed, o, cricketPlayerDBTypes, true, cricketPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CricketPlayerSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCricketPlayersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketPlayer{}
	if err = randomize.Struct(seed, o, cricketPlayerDBTypes, true, cricketPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CricketPlayers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	cricketPlayerDBTypes = map[string]string{`PlayerID`: `integer`, `PlayerUUID`: `uuid`, `PlayerName`: `character varying`, `PlayerEmail`: `character varying`, `PlayerMobile`: `integer`, `PlayerPicture`: `bytea`, `PlayerRole`: `enum.cricket_role('Batsman','Bowler','Batsman AllRounder','Bowling AllRounder','Wicket Keeper')`, `BattingPositions`: `enum.cricket_batting_position('Opening Batsman','Top Order','Middle Order','Lower Middle Order','Tailender')`, `BowlerTypes`: `enum.cricket_bowler_type('Fast Bowler','Medium Fast Bowler','Medium Pacer','Spin Bowler','Leg Spinner','Off Spinner','ChinaMen')`, `FieldingPositions`: `enum.cricket_fielding_position('Slip','Gully','Third Man','Fine Leg','Deep Square Leg','Deep Midwicket','Long On','Long Off','Cover','Extra Cover','Point','Square Leg','Mid On','Mid Off','Midwicket','Short Leg','Leg Slip','Short Fine Leg')`}
	_                    = bytes.MinRead
)

func testCricketPlayersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(cricketPlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(cricketPlayerAllColumns) == len(cricketPlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CricketPlayer{}
	if err = randomize.Struct(seed, o, cricketPlayerDBTypes, true, cricketPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CricketPlayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, cricketPlayerDBTypes, true, cricketPlayerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CricketPlayer struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCricketPlayersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(cricketPlayerAllColumns) == len(cricketPlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CricketPlayer{}
	if err = randomize.Struct(seed, o, cricketPlayerDBTypes, true, cricketPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CricketPlayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, cricketPlayerDBTypes, true, cricketPlayerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CricketPlayer struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(cricketPlayerAllColumns, cricketPlayerPrimaryKeyColumns) {
		fields = cricketPlayerAllColumns
	} else {
		fields = strmangle.SetComplement(
			cricketPlayerAllColumns,
			cricketPlayerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CricketPlayerSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCricketPlayersUpsert(t *testing.T) {
	t.Parallel()

	if len(cricketPlayerAllColumns) == len(cricketPlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CricketPlayer{}
	if err = randomize.Struct(seed, &o, cricketPlayerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CricketPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CricketPlayer: %s", err)
	}

	count, err := CricketPlayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, cricketPlayerDBTypes, false, cricketPlayerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CricketPlayer struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CricketPlayer: %s", err)
	}

	count, err = CricketPlayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
