// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CricketTeam is an object representing the database table.
type CricketTeam struct {
	TeamID   int    `boil:"team_id" json:"team_id" toml:"team_id" yaml:"team_id"`
	TeamName string `boil:"team_name" json:"team_name" toml:"team_name" yaml:"team_name"`
	Country  string `boil:"country" json:"country" toml:"country" yaml:"country"`

	R *cricketTeamR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cricketTeamL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CricketTeamColumns = struct {
	TeamID   string
	TeamName string
	Country  string
}{
	TeamID:   "team_id",
	TeamName: "team_name",
	Country:  "country",
}

var CricketTeamTableColumns = struct {
	TeamID   string
	TeamName string
	Country  string
}{
	TeamID:   "cricket_teams.team_id",
	TeamName: "cricket_teams.team_name",
	Country:  "cricket_teams.country",
}

// Generated where

var CricketTeamWhere = struct {
	TeamID   whereHelperint
	TeamName whereHelperstring
	Country  whereHelperstring
}{
	TeamID:   whereHelperint{field: "\"cricket_teams\".\"team_id\""},
	TeamName: whereHelperstring{field: "\"cricket_teams\".\"team_name\""},
	Country:  whereHelperstring{field: "\"cricket_teams\".\"country\""},
}

// CricketTeamRels is where relationship names are stored.
var CricketTeamRels = struct {
	TeamTeamPlayers string
}{
	TeamTeamPlayers: "TeamTeamPlayers",
}

// cricketTeamR is where relationships are stored.
type cricketTeamR struct {
	TeamTeamPlayers TeamPlayerSlice `boil:"TeamTeamPlayers" json:"TeamTeamPlayers" toml:"TeamTeamPlayers" yaml:"TeamTeamPlayers"`
}

// NewStruct creates a new relationship struct
func (*cricketTeamR) NewStruct() *cricketTeamR {
	return &cricketTeamR{}
}

func (r *cricketTeamR) GetTeamTeamPlayers() TeamPlayerSlice {
	if r == nil {
		return nil
	}
	return r.TeamTeamPlayers
}

// cricketTeamL is where Load methods for each relationship are stored.
type cricketTeamL struct{}

var (
	cricketTeamAllColumns            = []string{"team_id", "team_name", "country"}
	cricketTeamColumnsWithoutDefault = []string{"team_name", "country"}
	cricketTeamColumnsWithDefault    = []string{"team_id"}
	cricketTeamPrimaryKeyColumns     = []string{"team_id"}
	cricketTeamGeneratedColumns      = []string{}
)

type (
	// CricketTeamSlice is an alias for a slice of pointers to CricketTeam.
	// This should almost always be used instead of []CricketTeam.
	CricketTeamSlice []*CricketTeam
	// CricketTeamHook is the signature for custom CricketTeam hook methods
	CricketTeamHook func(context.Context, boil.ContextExecutor, *CricketTeam) error

	cricketTeamQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cricketTeamType                 = reflect.TypeOf(&CricketTeam{})
	cricketTeamMapping              = queries.MakeStructMapping(cricketTeamType)
	cricketTeamPrimaryKeyMapping, _ = queries.BindMapping(cricketTeamType, cricketTeamMapping, cricketTeamPrimaryKeyColumns)
	cricketTeamInsertCacheMut       sync.RWMutex
	cricketTeamInsertCache          = make(map[string]insertCache)
	cricketTeamUpdateCacheMut       sync.RWMutex
	cricketTeamUpdateCache          = make(map[string]updateCache)
	cricketTeamUpsertCacheMut       sync.RWMutex
	cricketTeamUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cricketTeamAfterSelectHooks []CricketTeamHook

var cricketTeamBeforeInsertHooks []CricketTeamHook
var cricketTeamAfterInsertHooks []CricketTeamHook

var cricketTeamBeforeUpdateHooks []CricketTeamHook
var cricketTeamAfterUpdateHooks []CricketTeamHook

var cricketTeamBeforeDeleteHooks []CricketTeamHook
var cricketTeamAfterDeleteHooks []CricketTeamHook

var cricketTeamBeforeUpsertHooks []CricketTeamHook
var cricketTeamAfterUpsertHooks []CricketTeamHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CricketTeam) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cricketTeamAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CricketTeam) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cricketTeamBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CricketTeam) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cricketTeamAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CricketTeam) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cricketTeamBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CricketTeam) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cricketTeamAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CricketTeam) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cricketTeamBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CricketTeam) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cricketTeamAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CricketTeam) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cricketTeamBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CricketTeam) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cricketTeamAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCricketTeamHook registers your hook function for all future operations.
func AddCricketTeamHook(hookPoint boil.HookPoint, cricketTeamHook CricketTeamHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		cricketTeamAfterSelectHooks = append(cricketTeamAfterSelectHooks, cricketTeamHook)
	case boil.BeforeInsertHook:
		cricketTeamBeforeInsertHooks = append(cricketTeamBeforeInsertHooks, cricketTeamHook)
	case boil.AfterInsertHook:
		cricketTeamAfterInsertHooks = append(cricketTeamAfterInsertHooks, cricketTeamHook)
	case boil.BeforeUpdateHook:
		cricketTeamBeforeUpdateHooks = append(cricketTeamBeforeUpdateHooks, cricketTeamHook)
	case boil.AfterUpdateHook:
		cricketTeamAfterUpdateHooks = append(cricketTeamAfterUpdateHooks, cricketTeamHook)
	case boil.BeforeDeleteHook:
		cricketTeamBeforeDeleteHooks = append(cricketTeamBeforeDeleteHooks, cricketTeamHook)
	case boil.AfterDeleteHook:
		cricketTeamAfterDeleteHooks = append(cricketTeamAfterDeleteHooks, cricketTeamHook)
	case boil.BeforeUpsertHook:
		cricketTeamBeforeUpsertHooks = append(cricketTeamBeforeUpsertHooks, cricketTeamHook)
	case boil.AfterUpsertHook:
		cricketTeamAfterUpsertHooks = append(cricketTeamAfterUpsertHooks, cricketTeamHook)
	}
}

// OneG returns a single cricketTeam record from the query using the global executor.
func (q cricketTeamQuery) OneG(ctx context.Context) (*CricketTeam, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single cricketTeam record from the query.
func (q cricketTeamQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CricketTeam, error) {
	o := &CricketTeam{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cricket_teams")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all CricketTeam records from the query using the global executor.
func (q cricketTeamQuery) AllG(ctx context.Context) (CricketTeamSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all CricketTeam records from the query.
func (q cricketTeamQuery) All(ctx context.Context, exec boil.ContextExecutor) (CricketTeamSlice, error) {
	var o []*CricketTeam

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CricketTeam slice")
	}

	if len(cricketTeamAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all CricketTeam records in the query using the global executor
func (q cricketTeamQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all CricketTeam records in the query.
func (q cricketTeamQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cricket_teams rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q cricketTeamQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q cricketTeamQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cricket_teams exists")
	}

	return count > 0, nil
}

// TeamTeamPlayers retrieves all the team_player's TeamPlayers with an executor via team_id column.
func (o *CricketTeam) TeamTeamPlayers(mods ...qm.QueryMod) teamPlayerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"team_players\".\"team_id\"=?", o.TeamID),
	)

	return TeamPlayers(queryMods...)
}

// LoadTeamTeamPlayers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (cricketTeamL) LoadTeamTeamPlayers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCricketTeam interface{}, mods queries.Applicator) error {
	var slice []*CricketTeam
	var object *CricketTeam

	if singular {
		var ok bool
		object, ok = maybeCricketTeam.(*CricketTeam)
		if !ok {
			object = new(CricketTeam)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCricketTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCricketTeam))
			}
		}
	} else {
		s, ok := maybeCricketTeam.(*[]*CricketTeam)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCricketTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCricketTeam))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cricketTeamR{}
		}
		args = append(args, object.TeamID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cricketTeamR{}
			}

			for _, a := range args {
				if a == obj.TeamID {
					continue Outer
				}
			}

			args = append(args, obj.TeamID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`team_players`),
		qm.WhereIn(`team_players.team_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load team_players")
	}

	var resultSlice []*TeamPlayer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice team_players")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on team_players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for team_players")
	}

	if len(teamPlayerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TeamTeamPlayers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &teamPlayerR{}
			}
			foreign.R.Team = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.TeamID == foreign.TeamID {
				local.R.TeamTeamPlayers = append(local.R.TeamTeamPlayers, foreign)
				if foreign.R == nil {
					foreign.R = &teamPlayerR{}
				}
				foreign.R.Team = local
				break
			}
		}
	}

	return nil
}

// AddTeamTeamPlayersG adds the given related objects to the existing relationships
// of the cricket_team, optionally inserting them as new records.
// Appends related to o.R.TeamTeamPlayers.
// Sets related.R.Team appropriately.
// Uses the global database handle.
func (o *CricketTeam) AddTeamTeamPlayersG(ctx context.Context, insert bool, related ...*TeamPlayer) error {
	return o.AddTeamTeamPlayers(ctx, boil.GetContextDB(), insert, related...)
}

// AddTeamTeamPlayers adds the given related objects to the existing relationships
// of the cricket_team, optionally inserting them as new records.
// Appends related to o.R.TeamTeamPlayers.
// Sets related.R.Team appropriately.
func (o *CricketTeam) AddTeamTeamPlayers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TeamPlayer) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TeamID = o.TeamID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"team_players\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"team_id"}),
				strmangle.WhereClause("\"", "\"", 2, teamPlayerPrimaryKeyColumns),
			)
			values := []interface{}{o.TeamID, rel.PlayerID, rel.TeamID, rel.JoiningDate}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TeamID = o.TeamID
		}
	}

	if o.R == nil {
		o.R = &cricketTeamR{
			TeamTeamPlayers: related,
		}
	} else {
		o.R.TeamTeamPlayers = append(o.R.TeamTeamPlayers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &teamPlayerR{
				Team: o,
			}
		} else {
			rel.R.Team = o
		}
	}
	return nil
}

// CricketTeams retrieves all the records using an executor.
func CricketTeams(mods ...qm.QueryMod) cricketTeamQuery {
	mods = append(mods, qm.From("\"cricket_teams\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"cricket_teams\".*"})
	}

	return cricketTeamQuery{q}
}

// FindCricketTeamG retrieves a single record by ID.
func FindCricketTeamG(ctx context.Context, teamID int, selectCols ...string) (*CricketTeam, error) {
	return FindCricketTeam(ctx, boil.GetContextDB(), teamID, selectCols...)
}

// FindCricketTeam retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCricketTeam(ctx context.Context, exec boil.ContextExecutor, teamID int, selectCols ...string) (*CricketTeam, error) {
	cricketTeamObj := &CricketTeam{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"cricket_teams\" where \"team_id\"=$1", sel,
	)

	q := queries.Raw(query, teamID)

	err := q.Bind(ctx, exec, cricketTeamObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cricket_teams")
	}

	if err = cricketTeamObj.doAfterSelectHooks(ctx, exec); err != nil {
		return cricketTeamObj, err
	}

	return cricketTeamObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CricketTeam) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CricketTeam) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cricket_teams provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cricketTeamColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cricketTeamInsertCacheMut.RLock()
	cache, cached := cricketTeamInsertCache[key]
	cricketTeamInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cricketTeamAllColumns,
			cricketTeamColumnsWithDefault,
			cricketTeamColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cricketTeamType, cricketTeamMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cricketTeamType, cricketTeamMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"cricket_teams\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"cricket_teams\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cricket_teams")
	}

	if !cached {
		cricketTeamInsertCacheMut.Lock()
		cricketTeamInsertCache[key] = cache
		cricketTeamInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single CricketTeam record using the global executor.
// See Update for more documentation.
func (o *CricketTeam) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the CricketTeam.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CricketTeam) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cricketTeamUpdateCacheMut.RLock()
	cache, cached := cricketTeamUpdateCache[key]
	cricketTeamUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cricketTeamAllColumns,
			cricketTeamPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cricket_teams, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"cricket_teams\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, cricketTeamPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cricketTeamType, cricketTeamMapping, append(wl, cricketTeamPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cricket_teams row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cricket_teams")
	}

	if !cached {
		cricketTeamUpdateCacheMut.Lock()
		cricketTeamUpdateCache[key] = cache
		cricketTeamUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q cricketTeamQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q cricketTeamQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cricket_teams")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cricket_teams")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CricketTeamSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CricketTeamSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cricketTeamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"cricket_teams\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, cricketTeamPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cricketTeam slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cricketTeam")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CricketTeam) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CricketTeam) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cricket_teams provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cricketTeamColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cricketTeamUpsertCacheMut.RLock()
	cache, cached := cricketTeamUpsertCache[key]
	cricketTeamUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cricketTeamAllColumns,
			cricketTeamColumnsWithDefault,
			cricketTeamColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			cricketTeamAllColumns,
			cricketTeamPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert cricket_teams, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(cricketTeamPrimaryKeyColumns))
			copy(conflict, cricketTeamPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"cricket_teams\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(cricketTeamType, cricketTeamMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cricketTeamType, cricketTeamMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert cricket_teams")
	}

	if !cached {
		cricketTeamUpsertCacheMut.Lock()
		cricketTeamUpsertCache[key] = cache
		cricketTeamUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single CricketTeam record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CricketTeam) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single CricketTeam record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CricketTeam) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CricketTeam provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cricketTeamPrimaryKeyMapping)
	sql := "DELETE FROM \"cricket_teams\" WHERE \"team_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cricket_teams")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cricket_teams")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q cricketTeamQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q cricketTeamQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cricketTeamQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cricket_teams")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cricket_teams")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CricketTeamSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CricketTeamSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cricketTeamBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cricketTeamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"cricket_teams\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cricketTeamPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cricketTeam slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cricket_teams")
	}

	if len(cricketTeamAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CricketTeam) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no CricketTeam provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CricketTeam) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCricketTeam(ctx, exec, o.TeamID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CricketTeamSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty CricketTeamSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CricketTeamSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CricketTeamSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cricketTeamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"cricket_teams\".* FROM \"cricket_teams\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cricketTeamPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CricketTeamSlice")
	}

	*o = slice

	return nil
}

// CricketTeamExistsG checks if the CricketTeam row exists.
func CricketTeamExistsG(ctx context.Context, teamID int) (bool, error) {
	return CricketTeamExists(ctx, boil.GetContextDB(), teamID)
}

// CricketTeamExists checks if the CricketTeam row exists.
func CricketTeamExists(ctx context.Context, exec boil.ContextExecutor, teamID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"cricket_teams\" where \"team_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, teamID)
	}
	row := exec.QueryRowContext(ctx, sql, teamID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cricket_teams exists")
	}

	return exists, nil
}

// Exists checks if the CricketTeam row exists.
func (o *CricketTeam) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CricketTeamExists(ctx, exec, o.TeamID)
}
