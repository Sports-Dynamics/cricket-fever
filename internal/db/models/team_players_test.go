// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTeamPlayers(t *testing.T) {
	t.Parallel()

	query := TeamPlayers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTeamPlayersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamPlayer{}
	if err = randomize.Struct(seed, o, teamPlayerDBTypes, true, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TeamPlayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTeamPlayersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamPlayer{}
	if err = randomize.Struct(seed, o, teamPlayerDBTypes, true, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TeamPlayers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TeamPlayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTeamPlayersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamPlayer{}
	if err = randomize.Struct(seed, o, teamPlayerDBTypes, true, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TeamPlayerSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TeamPlayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTeamPlayersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamPlayer{}
	if err = randomize.Struct(seed, o, teamPlayerDBTypes, true, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TeamPlayerExists(ctx, tx, o.PlayerID, o.TeamID)
	if err != nil {
		t.Errorf("Unable to check if TeamPlayer exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TeamPlayerExists to return true, but got false.")
	}
}

func testTeamPlayersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamPlayer{}
	if err = randomize.Struct(seed, o, teamPlayerDBTypes, true, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	teamPlayerFound, err := FindTeamPlayer(ctx, tx, o.PlayerID, o.TeamID)
	if err != nil {
		t.Error(err)
	}

	if teamPlayerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTeamPlayersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamPlayer{}
	if err = randomize.Struct(seed, o, teamPlayerDBTypes, true, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TeamPlayers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTeamPlayersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamPlayer{}
	if err = randomize.Struct(seed, o, teamPlayerDBTypes, true, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TeamPlayers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTeamPlayersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	teamPlayerOne := &TeamPlayer{}
	teamPlayerTwo := &TeamPlayer{}
	if err = randomize.Struct(seed, teamPlayerOne, teamPlayerDBTypes, false, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}
	if err = randomize.Struct(seed, teamPlayerTwo, teamPlayerDBTypes, false, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = teamPlayerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = teamPlayerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TeamPlayers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTeamPlayersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	teamPlayerOne := &TeamPlayer{}
	teamPlayerTwo := &TeamPlayer{}
	if err = randomize.Struct(seed, teamPlayerOne, teamPlayerDBTypes, false, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}
	if err = randomize.Struct(seed, teamPlayerTwo, teamPlayerDBTypes, false, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = teamPlayerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = teamPlayerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TeamPlayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func teamPlayerBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TeamPlayer) error {
	*o = TeamPlayer{}
	return nil
}

func teamPlayerAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TeamPlayer) error {
	*o = TeamPlayer{}
	return nil
}

func teamPlayerAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TeamPlayer) error {
	*o = TeamPlayer{}
	return nil
}

func teamPlayerBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TeamPlayer) error {
	*o = TeamPlayer{}
	return nil
}

func teamPlayerAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TeamPlayer) error {
	*o = TeamPlayer{}
	return nil
}

func teamPlayerBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TeamPlayer) error {
	*o = TeamPlayer{}
	return nil
}

func teamPlayerAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TeamPlayer) error {
	*o = TeamPlayer{}
	return nil
}

func teamPlayerBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TeamPlayer) error {
	*o = TeamPlayer{}
	return nil
}

func teamPlayerAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TeamPlayer) error {
	*o = TeamPlayer{}
	return nil
}

func testTeamPlayersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TeamPlayer{}
	o := &TeamPlayer{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, teamPlayerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TeamPlayer object: %s", err)
	}

	AddTeamPlayerHook(boil.BeforeInsertHook, teamPlayerBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	teamPlayerBeforeInsertHooks = []TeamPlayerHook{}

	AddTeamPlayerHook(boil.AfterInsertHook, teamPlayerAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	teamPlayerAfterInsertHooks = []TeamPlayerHook{}

	AddTeamPlayerHook(boil.AfterSelectHook, teamPlayerAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	teamPlayerAfterSelectHooks = []TeamPlayerHook{}

	AddTeamPlayerHook(boil.BeforeUpdateHook, teamPlayerBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	teamPlayerBeforeUpdateHooks = []TeamPlayerHook{}

	AddTeamPlayerHook(boil.AfterUpdateHook, teamPlayerAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	teamPlayerAfterUpdateHooks = []TeamPlayerHook{}

	AddTeamPlayerHook(boil.BeforeDeleteHook, teamPlayerBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	teamPlayerBeforeDeleteHooks = []TeamPlayerHook{}

	AddTeamPlayerHook(boil.AfterDeleteHook, teamPlayerAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	teamPlayerAfterDeleteHooks = []TeamPlayerHook{}

	AddTeamPlayerHook(boil.BeforeUpsertHook, teamPlayerBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	teamPlayerBeforeUpsertHooks = []TeamPlayerHook{}

	AddTeamPlayerHook(boil.AfterUpsertHook, teamPlayerAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	teamPlayerAfterUpsertHooks = []TeamPlayerHook{}
}

func testTeamPlayersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamPlayer{}
	if err = randomize.Struct(seed, o, teamPlayerDBTypes, true, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TeamPlayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTeamPlayersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamPlayer{}
	if err = randomize.Struct(seed, o, teamPlayerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(teamPlayerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TeamPlayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTeamPlayerToOneCricketPlayerUsingPlayer(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TeamPlayer
	var foreign CricketPlayer

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, teamPlayerDBTypes, false, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, cricketPlayerDBTypes, false, cricketPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketPlayer struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PlayerID = foreign.PlayerID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Player().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.PlayerID != foreign.PlayerID {
		t.Errorf("want: %v, got %v", foreign.PlayerID, check.PlayerID)
	}

	ranAfterSelectHook := false
	AddCricketPlayerHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *CricketPlayer) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TeamPlayerSlice{&local}
	if err = local.L.LoadPlayer(ctx, tx, false, (*[]*TeamPlayer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Player == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Player = nil
	if err = local.L.LoadPlayer(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Player == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTeamPlayerToOneCricketTeamUsingTeam(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TeamPlayer
	var foreign CricketTeam

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, teamPlayerDBTypes, false, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, cricketTeamDBTypes, false, cricketTeamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketTeam struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TeamID = foreign.TeamID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Team().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.TeamID != foreign.TeamID {
		t.Errorf("want: %v, got %v", foreign.TeamID, check.TeamID)
	}

	ranAfterSelectHook := false
	AddCricketTeamHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *CricketTeam) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TeamPlayerSlice{&local}
	if err = local.L.LoadTeam(ctx, tx, false, (*[]*TeamPlayer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Team == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Team = nil
	if err = local.L.LoadTeam(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Team == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTeamPlayerToOneSetOpCricketPlayerUsingPlayer(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TeamPlayer
	var b, c CricketPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamPlayerDBTypes, false, strmangle.SetComplement(teamPlayerPrimaryKeyColumns, teamPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, cricketPlayerDBTypes, false, strmangle.SetComplement(cricketPlayerPrimaryKeyColumns, cricketPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cricketPlayerDBTypes, false, strmangle.SetComplement(cricketPlayerPrimaryKeyColumns, cricketPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*CricketPlayer{&b, &c} {
		err = a.SetPlayer(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Player != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PlayerTeamPlayers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PlayerID != x.PlayerID {
			t.Error("foreign key was wrong value", a.PlayerID)
		}

		if exists, err := TeamPlayerExists(ctx, tx, a.PlayerID, a.TeamID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testTeamPlayerToOneSetOpCricketTeamUsingTeam(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TeamPlayer
	var b, c CricketTeam

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamPlayerDBTypes, false, strmangle.SetComplement(teamPlayerPrimaryKeyColumns, teamPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, cricketTeamDBTypes, false, strmangle.SetComplement(cricketTeamPrimaryKeyColumns, cricketTeamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cricketTeamDBTypes, false, strmangle.SetComplement(cricketTeamPrimaryKeyColumns, cricketTeamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*CricketTeam{&b, &c} {
		err = a.SetTeam(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Team != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TeamTeamPlayers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TeamID != x.TeamID {
			t.Error("foreign key was wrong value", a.TeamID)
		}

		if exists, err := TeamPlayerExists(ctx, tx, a.PlayerID, a.TeamID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testTeamPlayersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamPlayer{}
	if err = randomize.Struct(seed, o, teamPlayerDBTypes, true, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTeamPlayersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamPlayer{}
	if err = randomize.Struct(seed, o, teamPlayerDBTypes, true, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TeamPlayerSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTeamPlayersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamPlayer{}
	if err = randomize.Struct(seed, o, teamPlayerDBTypes, true, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TeamPlayers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	teamPlayerDBTypes = map[string]string{`PlayerID`: `integer`, `TeamID`: `integer`, `JoiningDate`: `date`}
	_                 = bytes.MinRead
)

func testTeamPlayersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(teamPlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(teamPlayerAllColumns) == len(teamPlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TeamPlayer{}
	if err = randomize.Struct(seed, o, teamPlayerDBTypes, true, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TeamPlayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, teamPlayerDBTypes, true, teamPlayerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTeamPlayersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(teamPlayerAllColumns) == len(teamPlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TeamPlayer{}
	if err = randomize.Struct(seed, o, teamPlayerDBTypes, true, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TeamPlayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, teamPlayerDBTypes, true, teamPlayerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(teamPlayerAllColumns, teamPlayerPrimaryKeyColumns) {
		fields = teamPlayerAllColumns
	} else {
		fields = strmangle.SetComplement(
			teamPlayerAllColumns,
			teamPlayerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TeamPlayerSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTeamPlayersUpsert(t *testing.T) {
	t.Parallel()

	if len(teamPlayerAllColumns) == len(teamPlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TeamPlayer{}
	if err = randomize.Struct(seed, &o, teamPlayerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TeamPlayer: %s", err)
	}

	count, err := TeamPlayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, teamPlayerDBTypes, false, teamPlayerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TeamPlayer: %s", err)
	}

	count, err = TeamPlayers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
