// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TeamPlayer is an object representing the database table.
type TeamPlayer struct {
	PlayerID    int       `boil:"player_id" json:"player_id" toml:"player_id" yaml:"player_id"`
	TeamID      int       `boil:"team_id" json:"team_id" toml:"team_id" yaml:"team_id"`
	JoiningDate time.Time `boil:"joining_date" json:"joining_date" toml:"joining_date" yaml:"joining_date"`

	R *teamPlayerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L teamPlayerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TeamPlayerColumns = struct {
	PlayerID    string
	TeamID      string
	JoiningDate string
}{
	PlayerID:    "player_id",
	TeamID:      "team_id",
	JoiningDate: "joining_date",
}

var TeamPlayerTableColumns = struct {
	PlayerID    string
	TeamID      string
	JoiningDate string
}{
	PlayerID:    "team_players.player_id",
	TeamID:      "team_players.team_id",
	JoiningDate: "team_players.joining_date",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var TeamPlayerWhere = struct {
	PlayerID    whereHelperint
	TeamID      whereHelperint
	JoiningDate whereHelpertime_Time
}{
	PlayerID:    whereHelperint{field: "\"team_players\".\"player_id\""},
	TeamID:      whereHelperint{field: "\"team_players\".\"team_id\""},
	JoiningDate: whereHelpertime_Time{field: "\"team_players\".\"joining_date\""},
}

// TeamPlayerRels is where relationship names are stored.
var TeamPlayerRels = struct {
	Player string
	Team   string
}{
	Player: "Player",
	Team:   "Team",
}

// teamPlayerR is where relationships are stored.
type teamPlayerR struct {
	Player *CricketPlayer `boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
	Team   *CricketTeam   `boil:"Team" json:"Team" toml:"Team" yaml:"Team"`
}

// NewStruct creates a new relationship struct
func (*teamPlayerR) NewStruct() *teamPlayerR {
	return &teamPlayerR{}
}

func (r *teamPlayerR) GetPlayer() *CricketPlayer {
	if r == nil {
		return nil
	}
	return r.Player
}

func (r *teamPlayerR) GetTeam() *CricketTeam {
	if r == nil {
		return nil
	}
	return r.Team
}

// teamPlayerL is where Load methods for each relationship are stored.
type teamPlayerL struct{}

var (
	teamPlayerAllColumns            = []string{"player_id", "team_id", "joining_date"}
	teamPlayerColumnsWithoutDefault = []string{"player_id", "team_id", "joining_date"}
	teamPlayerColumnsWithDefault    = []string{}
	teamPlayerPrimaryKeyColumns     = []string{"player_id", "team_id"}
	teamPlayerGeneratedColumns      = []string{}
)

type (
	// TeamPlayerSlice is an alias for a slice of pointers to TeamPlayer.
	// This should almost always be used instead of []TeamPlayer.
	TeamPlayerSlice []*TeamPlayer
	// TeamPlayerHook is the signature for custom TeamPlayer hook methods
	TeamPlayerHook func(context.Context, boil.ContextExecutor, *TeamPlayer) error

	teamPlayerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	teamPlayerType                 = reflect.TypeOf(&TeamPlayer{})
	teamPlayerMapping              = queries.MakeStructMapping(teamPlayerType)
	teamPlayerPrimaryKeyMapping, _ = queries.BindMapping(teamPlayerType, teamPlayerMapping, teamPlayerPrimaryKeyColumns)
	teamPlayerInsertCacheMut       sync.RWMutex
	teamPlayerInsertCache          = make(map[string]insertCache)
	teamPlayerUpdateCacheMut       sync.RWMutex
	teamPlayerUpdateCache          = make(map[string]updateCache)
	teamPlayerUpsertCacheMut       sync.RWMutex
	teamPlayerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var teamPlayerAfterSelectHooks []TeamPlayerHook

var teamPlayerBeforeInsertHooks []TeamPlayerHook
var teamPlayerAfterInsertHooks []TeamPlayerHook

var teamPlayerBeforeUpdateHooks []TeamPlayerHook
var teamPlayerAfterUpdateHooks []TeamPlayerHook

var teamPlayerBeforeDeleteHooks []TeamPlayerHook
var teamPlayerAfterDeleteHooks []TeamPlayerHook

var teamPlayerBeforeUpsertHooks []TeamPlayerHook
var teamPlayerAfterUpsertHooks []TeamPlayerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TeamPlayer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamPlayerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TeamPlayer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamPlayerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TeamPlayer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamPlayerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TeamPlayer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamPlayerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TeamPlayer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamPlayerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TeamPlayer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamPlayerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TeamPlayer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamPlayerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TeamPlayer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamPlayerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TeamPlayer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamPlayerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTeamPlayerHook registers your hook function for all future operations.
func AddTeamPlayerHook(hookPoint boil.HookPoint, teamPlayerHook TeamPlayerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		teamPlayerAfterSelectHooks = append(teamPlayerAfterSelectHooks, teamPlayerHook)
	case boil.BeforeInsertHook:
		teamPlayerBeforeInsertHooks = append(teamPlayerBeforeInsertHooks, teamPlayerHook)
	case boil.AfterInsertHook:
		teamPlayerAfterInsertHooks = append(teamPlayerAfterInsertHooks, teamPlayerHook)
	case boil.BeforeUpdateHook:
		teamPlayerBeforeUpdateHooks = append(teamPlayerBeforeUpdateHooks, teamPlayerHook)
	case boil.AfterUpdateHook:
		teamPlayerAfterUpdateHooks = append(teamPlayerAfterUpdateHooks, teamPlayerHook)
	case boil.BeforeDeleteHook:
		teamPlayerBeforeDeleteHooks = append(teamPlayerBeforeDeleteHooks, teamPlayerHook)
	case boil.AfterDeleteHook:
		teamPlayerAfterDeleteHooks = append(teamPlayerAfterDeleteHooks, teamPlayerHook)
	case boil.BeforeUpsertHook:
		teamPlayerBeforeUpsertHooks = append(teamPlayerBeforeUpsertHooks, teamPlayerHook)
	case boil.AfterUpsertHook:
		teamPlayerAfterUpsertHooks = append(teamPlayerAfterUpsertHooks, teamPlayerHook)
	}
}

// OneG returns a single teamPlayer record from the query using the global executor.
func (q teamPlayerQuery) OneG(ctx context.Context) (*TeamPlayer, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single teamPlayer record from the query.
func (q teamPlayerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TeamPlayer, error) {
	o := &TeamPlayer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for team_players")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all TeamPlayer records from the query using the global executor.
func (q teamPlayerQuery) AllG(ctx context.Context) (TeamPlayerSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all TeamPlayer records from the query.
func (q teamPlayerQuery) All(ctx context.Context, exec boil.ContextExecutor) (TeamPlayerSlice, error) {
	var o []*TeamPlayer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TeamPlayer slice")
	}

	if len(teamPlayerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all TeamPlayer records in the query using the global executor
func (q teamPlayerQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all TeamPlayer records in the query.
func (q teamPlayerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count team_players rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q teamPlayerQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q teamPlayerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if team_players exists")
	}

	return count > 0, nil
}

// Player pointed to by the foreign key.
func (o *TeamPlayer) Player(mods ...qm.QueryMod) cricketPlayerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"player_id\" = ?", o.PlayerID),
	}

	queryMods = append(queryMods, mods...)

	return CricketPlayers(queryMods...)
}

// Team pointed to by the foreign key.
func (o *TeamPlayer) Team(mods ...qm.QueryMod) cricketTeamQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"team_id\" = ?", o.TeamID),
	}

	queryMods = append(queryMods, mods...)

	return CricketTeams(queryMods...)
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (teamPlayerL) LoadPlayer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTeamPlayer interface{}, mods queries.Applicator) error {
	var slice []*TeamPlayer
	var object *TeamPlayer

	if singular {
		var ok bool
		object, ok = maybeTeamPlayer.(*TeamPlayer)
		if !ok {
			object = new(TeamPlayer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTeamPlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTeamPlayer))
			}
		}
	} else {
		s, ok := maybeTeamPlayer.(*[]*TeamPlayer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTeamPlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTeamPlayer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamPlayerR{}
		}
		args = append(args, object.PlayerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamPlayerR{}
			}

			for _, a := range args {
				if a == obj.PlayerID {
					continue Outer
				}
			}

			args = append(args, obj.PlayerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`cricket_players`),
		qm.WhereIn(`cricket_players.player_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CricketPlayer")
	}

	var resultSlice []*CricketPlayer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CricketPlayer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for cricket_players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cricket_players")
	}

	if len(cricketPlayerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &cricketPlayerR{}
		}
		foreign.R.PlayerTeamPlayers = append(foreign.R.PlayerTeamPlayers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerID == foreign.PlayerID {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &cricketPlayerR{}
				}
				foreign.R.PlayerTeamPlayers = append(foreign.R.PlayerTeamPlayers, local)
				break
			}
		}
	}

	return nil
}

// LoadTeam allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (teamPlayerL) LoadTeam(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTeamPlayer interface{}, mods queries.Applicator) error {
	var slice []*TeamPlayer
	var object *TeamPlayer

	if singular {
		var ok bool
		object, ok = maybeTeamPlayer.(*TeamPlayer)
		if !ok {
			object = new(TeamPlayer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTeamPlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTeamPlayer))
			}
		}
	} else {
		s, ok := maybeTeamPlayer.(*[]*TeamPlayer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTeamPlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTeamPlayer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamPlayerR{}
		}
		args = append(args, object.TeamID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamPlayerR{}
			}

			for _, a := range args {
				if a == obj.TeamID {
					continue Outer
				}
			}

			args = append(args, obj.TeamID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`cricket_teams`),
		qm.WhereIn(`cricket_teams.team_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CricketTeam")
	}

	var resultSlice []*CricketTeam
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CricketTeam")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for cricket_teams")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cricket_teams")
	}

	if len(cricketTeamAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Team = foreign
		if foreign.R == nil {
			foreign.R = &cricketTeamR{}
		}
		foreign.R.TeamTeamPlayers = append(foreign.R.TeamTeamPlayers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TeamID == foreign.TeamID {
				local.R.Team = foreign
				if foreign.R == nil {
					foreign.R = &cricketTeamR{}
				}
				foreign.R.TeamTeamPlayers = append(foreign.R.TeamTeamPlayers, local)
				break
			}
		}
	}

	return nil
}

// SetPlayerG of the teamPlayer to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.PlayerTeamPlayers.
// Uses the global database handle.
func (o *TeamPlayer) SetPlayerG(ctx context.Context, insert bool, related *CricketPlayer) error {
	return o.SetPlayer(ctx, boil.GetContextDB(), insert, related)
}

// SetPlayer of the teamPlayer to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.PlayerTeamPlayers.
func (o *TeamPlayer) SetPlayer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CricketPlayer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"team_players\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, teamPlayerPrimaryKeyColumns),
	)
	values := []interface{}{related.PlayerID, o.PlayerID, o.TeamID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerID = related.PlayerID
	if o.R == nil {
		o.R = &teamPlayerR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &cricketPlayerR{
			PlayerTeamPlayers: TeamPlayerSlice{o},
		}
	} else {
		related.R.PlayerTeamPlayers = append(related.R.PlayerTeamPlayers, o)
	}

	return nil
}

// SetTeamG of the teamPlayer to the related item.
// Sets o.R.Team to related.
// Adds o to related.R.TeamTeamPlayers.
// Uses the global database handle.
func (o *TeamPlayer) SetTeamG(ctx context.Context, insert bool, related *CricketTeam) error {
	return o.SetTeam(ctx, boil.GetContextDB(), insert, related)
}

// SetTeam of the teamPlayer to the related item.
// Sets o.R.Team to related.
// Adds o to related.R.TeamTeamPlayers.
func (o *TeamPlayer) SetTeam(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CricketTeam) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"team_players\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"team_id"}),
		strmangle.WhereClause("\"", "\"", 2, teamPlayerPrimaryKeyColumns),
	)
	values := []interface{}{related.TeamID, o.PlayerID, o.TeamID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TeamID = related.TeamID
	if o.R == nil {
		o.R = &teamPlayerR{
			Team: related,
		}
	} else {
		o.R.Team = related
	}

	if related.R == nil {
		related.R = &cricketTeamR{
			TeamTeamPlayers: TeamPlayerSlice{o},
		}
	} else {
		related.R.TeamTeamPlayers = append(related.R.TeamTeamPlayers, o)
	}

	return nil
}

// TeamPlayers retrieves all the records using an executor.
func TeamPlayers(mods ...qm.QueryMod) teamPlayerQuery {
	mods = append(mods, qm.From("\"team_players\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"team_players\".*"})
	}

	return teamPlayerQuery{q}
}

// FindTeamPlayerG retrieves a single record by ID.
func FindTeamPlayerG(ctx context.Context, playerID int, teamID int, selectCols ...string) (*TeamPlayer, error) {
	return FindTeamPlayer(ctx, boil.GetContextDB(), playerID, teamID, selectCols...)
}

// FindTeamPlayer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTeamPlayer(ctx context.Context, exec boil.ContextExecutor, playerID int, teamID int, selectCols ...string) (*TeamPlayer, error) {
	teamPlayerObj := &TeamPlayer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"team_players\" where \"player_id\"=$1 AND \"team_id\"=$2", sel,
	)

	q := queries.Raw(query, playerID, teamID)

	err := q.Bind(ctx, exec, teamPlayerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from team_players")
	}

	if err = teamPlayerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return teamPlayerObj, err
	}

	return teamPlayerObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TeamPlayer) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TeamPlayer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no team_players provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(teamPlayerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	teamPlayerInsertCacheMut.RLock()
	cache, cached := teamPlayerInsertCache[key]
	teamPlayerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			teamPlayerAllColumns,
			teamPlayerColumnsWithDefault,
			teamPlayerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(teamPlayerType, teamPlayerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(teamPlayerType, teamPlayerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"team_players\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"team_players\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into team_players")
	}

	if !cached {
		teamPlayerInsertCacheMut.Lock()
		teamPlayerInsertCache[key] = cache
		teamPlayerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single TeamPlayer record using the global executor.
// See Update for more documentation.
func (o *TeamPlayer) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the TeamPlayer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TeamPlayer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	teamPlayerUpdateCacheMut.RLock()
	cache, cached := teamPlayerUpdateCache[key]
	teamPlayerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			teamPlayerAllColumns,
			teamPlayerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update team_players, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"team_players\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, teamPlayerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(teamPlayerType, teamPlayerMapping, append(wl, teamPlayerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update team_players row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for team_players")
	}

	if !cached {
		teamPlayerUpdateCacheMut.Lock()
		teamPlayerUpdateCache[key] = cache
		teamPlayerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q teamPlayerQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q teamPlayerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for team_players")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for team_players")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TeamPlayerSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TeamPlayerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamPlayerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"team_players\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, teamPlayerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in teamPlayer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all teamPlayer")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TeamPlayer) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TeamPlayer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no team_players provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(teamPlayerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	teamPlayerUpsertCacheMut.RLock()
	cache, cached := teamPlayerUpsertCache[key]
	teamPlayerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			teamPlayerAllColumns,
			teamPlayerColumnsWithDefault,
			teamPlayerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			teamPlayerAllColumns,
			teamPlayerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert team_players, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(teamPlayerPrimaryKeyColumns))
			copy(conflict, teamPlayerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"team_players\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(teamPlayerType, teamPlayerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(teamPlayerType, teamPlayerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert team_players")
	}

	if !cached {
		teamPlayerUpsertCacheMut.Lock()
		teamPlayerUpsertCache[key] = cache
		teamPlayerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single TeamPlayer record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TeamPlayer) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single TeamPlayer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TeamPlayer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TeamPlayer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), teamPlayerPrimaryKeyMapping)
	sql := "DELETE FROM \"team_players\" WHERE \"player_id\"=$1 AND \"team_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from team_players")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for team_players")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q teamPlayerQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q teamPlayerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no teamPlayerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from team_players")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for team_players")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TeamPlayerSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TeamPlayerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(teamPlayerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamPlayerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"team_players\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, teamPlayerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from teamPlayer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for team_players")
	}

	if len(teamPlayerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TeamPlayer) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no TeamPlayer provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TeamPlayer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTeamPlayer(ctx, exec, o.PlayerID, o.TeamID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TeamPlayerSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty TeamPlayerSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TeamPlayerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TeamPlayerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamPlayerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"team_players\".* FROM \"team_players\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, teamPlayerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TeamPlayerSlice")
	}

	*o = slice

	return nil
}

// TeamPlayerExistsG checks if the TeamPlayer row exists.
func TeamPlayerExistsG(ctx context.Context, playerID int, teamID int) (bool, error) {
	return TeamPlayerExists(ctx, boil.GetContextDB(), playerID, teamID)
}

// TeamPlayerExists checks if the TeamPlayer row exists.
func TeamPlayerExists(ctx context.Context, exec boil.ContextExecutor, playerID int, teamID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"team_players\" where \"player_id\"=$1 AND \"team_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, playerID, teamID)
	}
	row := exec.QueryRowContext(ctx, sql, playerID, teamID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if team_players exists")
	}

	return exists, nil
}

// Exists checks if the TeamPlayer row exists.
func (o *TeamPlayer) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TeamPlayerExists(ctx, exec, o.PlayerID, o.TeamID)
}
