// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGroundBookings(t *testing.T) {
	t.Parallel()

	query := GroundBookings()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGroundBookingsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroundBooking{}
	if err = randomize.Struct(seed, o, groundBookingDBTypes, true, groundBookingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroundBooking struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GroundBookings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGroundBookingsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroundBooking{}
	if err = randomize.Struct(seed, o, groundBookingDBTypes, true, groundBookingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroundBooking struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GroundBookings().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GroundBookings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGroundBookingsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroundBooking{}
	if err = randomize.Struct(seed, o, groundBookingDBTypes, true, groundBookingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroundBooking struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GroundBookingSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GroundBookings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGroundBookingsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroundBooking{}
	if err = randomize.Struct(seed, o, groundBookingDBTypes, true, groundBookingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroundBooking struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GroundBookingExists(ctx, tx, o.BookingID)
	if err != nil {
		t.Errorf("Unable to check if GroundBooking exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GroundBookingExists to return true, but got false.")
	}
}

func testGroundBookingsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroundBooking{}
	if err = randomize.Struct(seed, o, groundBookingDBTypes, true, groundBookingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroundBooking struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	groundBookingFound, err := FindGroundBooking(ctx, tx, o.BookingID)
	if err != nil {
		t.Error(err)
	}

	if groundBookingFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGroundBookingsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroundBooking{}
	if err = randomize.Struct(seed, o, groundBookingDBTypes, true, groundBookingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroundBooking struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = GroundBookings().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGroundBookingsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroundBooking{}
	if err = randomize.Struct(seed, o, groundBookingDBTypes, true, groundBookingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroundBooking struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := GroundBookings().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGroundBookingsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	groundBookingOne := &GroundBooking{}
	groundBookingTwo := &GroundBooking{}
	if err = randomize.Struct(seed, groundBookingOne, groundBookingDBTypes, false, groundBookingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroundBooking struct: %s", err)
	}
	if err = randomize.Struct(seed, groundBookingTwo, groundBookingDBTypes, false, groundBookingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroundBooking struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = groundBookingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = groundBookingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GroundBookings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGroundBookingsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	groundBookingOne := &GroundBooking{}
	groundBookingTwo := &GroundBooking{}
	if err = randomize.Struct(seed, groundBookingOne, groundBookingDBTypes, false, groundBookingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroundBooking struct: %s", err)
	}
	if err = randomize.Struct(seed, groundBookingTwo, groundBookingDBTypes, false, groundBookingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroundBooking struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = groundBookingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = groundBookingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GroundBookings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func groundBookingBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *GroundBooking) error {
	*o = GroundBooking{}
	return nil
}

func groundBookingAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *GroundBooking) error {
	*o = GroundBooking{}
	return nil
}

func groundBookingAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *GroundBooking) error {
	*o = GroundBooking{}
	return nil
}

func groundBookingBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GroundBooking) error {
	*o = GroundBooking{}
	return nil
}

func groundBookingAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GroundBooking) error {
	*o = GroundBooking{}
	return nil
}

func groundBookingBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GroundBooking) error {
	*o = GroundBooking{}
	return nil
}

func groundBookingAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GroundBooking) error {
	*o = GroundBooking{}
	return nil
}

func groundBookingBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GroundBooking) error {
	*o = GroundBooking{}
	return nil
}

func groundBookingAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GroundBooking) error {
	*o = GroundBooking{}
	return nil
}

func testGroundBookingsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &GroundBooking{}
	o := &GroundBooking{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, groundBookingDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GroundBooking object: %s", err)
	}

	AddGroundBookingHook(boil.BeforeInsertHook, groundBookingBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	groundBookingBeforeInsertHooks = []GroundBookingHook{}

	AddGroundBookingHook(boil.AfterInsertHook, groundBookingAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	groundBookingAfterInsertHooks = []GroundBookingHook{}

	AddGroundBookingHook(boil.AfterSelectHook, groundBookingAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	groundBookingAfterSelectHooks = []GroundBookingHook{}

	AddGroundBookingHook(boil.BeforeUpdateHook, groundBookingBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	groundBookingBeforeUpdateHooks = []GroundBookingHook{}

	AddGroundBookingHook(boil.AfterUpdateHook, groundBookingAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	groundBookingAfterUpdateHooks = []GroundBookingHook{}

	AddGroundBookingHook(boil.BeforeDeleteHook, groundBookingBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	groundBookingBeforeDeleteHooks = []GroundBookingHook{}

	AddGroundBookingHook(boil.AfterDeleteHook, groundBookingAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	groundBookingAfterDeleteHooks = []GroundBookingHook{}

	AddGroundBookingHook(boil.BeforeUpsertHook, groundBookingBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	groundBookingBeforeUpsertHooks = []GroundBookingHook{}

	AddGroundBookingHook(boil.AfterUpsertHook, groundBookingAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	groundBookingAfterUpsertHooks = []GroundBookingHook{}
}

func testGroundBookingsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroundBooking{}
	if err = randomize.Struct(seed, o, groundBookingDBTypes, true, groundBookingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroundBooking struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GroundBookings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGroundBookingsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroundBooking{}
	if err = randomize.Struct(seed, o, groundBookingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GroundBooking struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(groundBookingColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := GroundBookings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGroundBookingToManyBookingPayments(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GroundBooking
	var b, c Payment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, groundBookingDBTypes, true, groundBookingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroundBooking struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, paymentDBTypes, false, paymentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, paymentDBTypes, false, paymentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.BookingID, a.BookingID)
	queries.Assign(&c.BookingID, a.BookingID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.BookingPayments().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.BookingID, b.BookingID) {
			bFound = true
		}
		if queries.Equal(v.BookingID, c.BookingID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GroundBookingSlice{&a}
	if err = a.L.LoadBookingPayments(ctx, tx, false, (*[]*GroundBooking)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BookingPayments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.BookingPayments = nil
	if err = a.L.LoadBookingPayments(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BookingPayments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGroundBookingToManyAddOpBookingPayments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GroundBooking
	var b, c, d, e Payment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, groundBookingDBTypes, false, strmangle.SetComplement(groundBookingPrimaryKeyColumns, groundBookingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Payment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Payment{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddBookingPayments(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.BookingID, first.BookingID) {
			t.Error("foreign key was wrong value", a.BookingID, first.BookingID)
		}
		if !queries.Equal(a.BookingID, second.BookingID) {
			t.Error("foreign key was wrong value", a.BookingID, second.BookingID)
		}

		if first.R.Booking != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Booking != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.BookingPayments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.BookingPayments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.BookingPayments().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testGroundBookingToManySetOpBookingPayments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GroundBooking
	var b, c, d, e Payment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, groundBookingDBTypes, false, strmangle.SetComplement(groundBookingPrimaryKeyColumns, groundBookingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Payment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetBookingPayments(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.BookingPayments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetBookingPayments(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.BookingPayments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.BookingID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.BookingID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.BookingID, d.BookingID) {
		t.Error("foreign key was wrong value", a.BookingID, d.BookingID)
	}
	if !queries.Equal(a.BookingID, e.BookingID) {
		t.Error("foreign key was wrong value", a.BookingID, e.BookingID)
	}

	if b.R.Booking != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Booking != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Booking != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Booking != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.BookingPayments[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.BookingPayments[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testGroundBookingToManyRemoveOpBookingPayments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GroundBooking
	var b, c, d, e Payment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, groundBookingDBTypes, false, strmangle.SetComplement(groundBookingPrimaryKeyColumns, groundBookingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Payment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddBookingPayments(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.BookingPayments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveBookingPayments(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.BookingPayments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.BookingID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.BookingID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Booking != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Booking != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Booking != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Booking != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.BookingPayments) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.BookingPayments[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.BookingPayments[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testGroundBookingToOneCricketGroundUsingGround(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local GroundBooking
	var foreign CricketGround

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, groundBookingDBTypes, true, groundBookingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroundBooking struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, cricketGroundDBTypes, false, cricketGroundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketGround struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.GroundID, foreign.GroundID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Ground().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.GroundID, foreign.GroundID) {
		t.Errorf("want: %v, got %v", foreign.GroundID, check.GroundID)
	}

	ranAfterSelectHook := false
	AddCricketGroundHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *CricketGround) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := GroundBookingSlice{&local}
	if err = local.L.LoadGround(ctx, tx, false, (*[]*GroundBooking)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Ground == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Ground = nil
	if err = local.L.LoadGround(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Ground == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testGroundBookingToOneCricketPlayerUsingPlayer(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local GroundBooking
	var foreign CricketPlayer

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, groundBookingDBTypes, true, groundBookingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroundBooking struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, cricketPlayerDBTypes, false, cricketPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketPlayer struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.PlayerID, foreign.PlayerID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Player().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.PlayerID, foreign.PlayerID) {
		t.Errorf("want: %v, got %v", foreign.PlayerID, check.PlayerID)
	}

	ranAfterSelectHook := false
	AddCricketPlayerHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *CricketPlayer) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := GroundBookingSlice{&local}
	if err = local.L.LoadPlayer(ctx, tx, false, (*[]*GroundBooking)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Player == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Player = nil
	if err = local.L.LoadPlayer(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Player == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testGroundBookingToOneCricketTeamUsingTeam(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local GroundBooking
	var foreign CricketTeam

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, groundBookingDBTypes, true, groundBookingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroundBooking struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, cricketTeamDBTypes, false, cricketTeamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketTeam struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.TeamID, foreign.TeamID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Team().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.TeamID, foreign.TeamID) {
		t.Errorf("want: %v, got %v", foreign.TeamID, check.TeamID)
	}

	ranAfterSelectHook := false
	AddCricketTeamHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *CricketTeam) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := GroundBookingSlice{&local}
	if err = local.L.LoadTeam(ctx, tx, false, (*[]*GroundBooking)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Team == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Team = nil
	if err = local.L.LoadTeam(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Team == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testGroundBookingToOneSetOpCricketGroundUsingGround(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GroundBooking
	var b, c CricketGround

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, groundBookingDBTypes, false, strmangle.SetComplement(groundBookingPrimaryKeyColumns, groundBookingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, cricketGroundDBTypes, false, strmangle.SetComplement(cricketGroundPrimaryKeyColumns, cricketGroundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cricketGroundDBTypes, false, strmangle.SetComplement(cricketGroundPrimaryKeyColumns, cricketGroundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*CricketGround{&b, &c} {
		err = a.SetGround(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Ground != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GroundGroundBookings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.GroundID, x.GroundID) {
			t.Error("foreign key was wrong value", a.GroundID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GroundID))
		reflect.Indirect(reflect.ValueOf(&a.GroundID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.GroundID, x.GroundID) {
			t.Error("foreign key was wrong value", a.GroundID, x.GroundID)
		}
	}
}

func testGroundBookingToOneRemoveOpCricketGroundUsingGround(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GroundBooking
	var b CricketGround

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, groundBookingDBTypes, false, strmangle.SetComplement(groundBookingPrimaryKeyColumns, groundBookingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, cricketGroundDBTypes, false, strmangle.SetComplement(cricketGroundPrimaryKeyColumns, cricketGroundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetGround(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveGround(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Ground().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Ground != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.GroundID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.GroundGroundBookings) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testGroundBookingToOneSetOpCricketPlayerUsingPlayer(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GroundBooking
	var b, c CricketPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, groundBookingDBTypes, false, strmangle.SetComplement(groundBookingPrimaryKeyColumns, groundBookingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, cricketPlayerDBTypes, false, strmangle.SetComplement(cricketPlayerPrimaryKeyColumns, cricketPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cricketPlayerDBTypes, false, strmangle.SetComplement(cricketPlayerPrimaryKeyColumns, cricketPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*CricketPlayer{&b, &c} {
		err = a.SetPlayer(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Player != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PlayerGroundBookings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.PlayerID, x.PlayerID) {
			t.Error("foreign key was wrong value", a.PlayerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PlayerID))
		reflect.Indirect(reflect.ValueOf(&a.PlayerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.PlayerID, x.PlayerID) {
			t.Error("foreign key was wrong value", a.PlayerID, x.PlayerID)
		}
	}
}

func testGroundBookingToOneRemoveOpCricketPlayerUsingPlayer(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GroundBooking
	var b CricketPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, groundBookingDBTypes, false, strmangle.SetComplement(groundBookingPrimaryKeyColumns, groundBookingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, cricketPlayerDBTypes, false, strmangle.SetComplement(cricketPlayerPrimaryKeyColumns, cricketPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetPlayer(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemovePlayer(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Player().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Player != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.PlayerID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.PlayerGroundBookings) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testGroundBookingToOneSetOpCricketTeamUsingTeam(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GroundBooking
	var b, c CricketTeam

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, groundBookingDBTypes, false, strmangle.SetComplement(groundBookingPrimaryKeyColumns, groundBookingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, cricketTeamDBTypes, false, strmangle.SetComplement(cricketTeamPrimaryKeyColumns, cricketTeamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cricketTeamDBTypes, false, strmangle.SetComplement(cricketTeamPrimaryKeyColumns, cricketTeamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*CricketTeam{&b, &c} {
		err = a.SetTeam(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Team != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TeamGroundBookings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.TeamID, x.TeamID) {
			t.Error("foreign key was wrong value", a.TeamID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TeamID))
		reflect.Indirect(reflect.ValueOf(&a.TeamID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.TeamID, x.TeamID) {
			t.Error("foreign key was wrong value", a.TeamID, x.TeamID)
		}
	}
}

func testGroundBookingToOneRemoveOpCricketTeamUsingTeam(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GroundBooking
	var b CricketTeam

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, groundBookingDBTypes, false, strmangle.SetComplement(groundBookingPrimaryKeyColumns, groundBookingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, cricketTeamDBTypes, false, strmangle.SetComplement(cricketTeamPrimaryKeyColumns, cricketTeamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetTeam(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveTeam(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Team().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Team != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.TeamID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.TeamGroundBookings) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testGroundBookingsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroundBooking{}
	if err = randomize.Struct(seed, o, groundBookingDBTypes, true, groundBookingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroundBooking struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGroundBookingsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroundBooking{}
	if err = randomize.Struct(seed, o, groundBookingDBTypes, true, groundBookingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroundBooking struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GroundBookingSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGroundBookingsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroundBooking{}
	if err = randomize.Struct(seed, o, groundBookingDBTypes, true, groundBookingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroundBooking struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GroundBookings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	groundBookingDBTypes = map[string]string{`BookingID`: `integer`, `BookingUUID`: `uuid`, `TeamID`: `integer`, `PlayerID`: `integer`, `GroundID`: `integer`, `BookingDate`: `date`, `StartTime`: `time without time zone`, `EndTime`: `time without time zone`, `Purpose`: `character varying`, `Status`: `character varying`}
	_                    = bytes.MinRead
)

func testGroundBookingsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(groundBookingPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(groundBookingAllColumns) == len(groundBookingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GroundBooking{}
	if err = randomize.Struct(seed, o, groundBookingDBTypes, true, groundBookingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroundBooking struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GroundBookings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, groundBookingDBTypes, true, groundBookingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GroundBooking struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGroundBookingsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(groundBookingAllColumns) == len(groundBookingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GroundBooking{}
	if err = randomize.Struct(seed, o, groundBookingDBTypes, true, groundBookingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroundBooking struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GroundBookings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, groundBookingDBTypes, true, groundBookingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GroundBooking struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(groundBookingAllColumns, groundBookingPrimaryKeyColumns) {
		fields = groundBookingAllColumns
	} else {
		fields = strmangle.SetComplement(
			groundBookingAllColumns,
			groundBookingPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GroundBookingSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGroundBookingsUpsert(t *testing.T) {
	t.Parallel()

	if len(groundBookingAllColumns) == len(groundBookingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := GroundBooking{}
	if err = randomize.Struct(seed, &o, groundBookingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GroundBooking struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GroundBooking: %s", err)
	}

	count, err := GroundBookings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, groundBookingDBTypes, false, groundBookingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GroundBooking struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GroundBooking: %s", err)
	}

	count, err = GroundBookings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
