// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCricketTeams(t *testing.T) {
	t.Parallel()

	query := CricketTeams()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCricketTeamsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketTeam{}
	if err = randomize.Struct(seed, o, cricketTeamDBTypes, true, cricketTeamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketTeam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CricketTeams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCricketTeamsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketTeam{}
	if err = randomize.Struct(seed, o, cricketTeamDBTypes, true, cricketTeamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketTeam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CricketTeams().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CricketTeams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCricketTeamsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketTeam{}
	if err = randomize.Struct(seed, o, cricketTeamDBTypes, true, cricketTeamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketTeam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CricketTeamSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CricketTeams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCricketTeamsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketTeam{}
	if err = randomize.Struct(seed, o, cricketTeamDBTypes, true, cricketTeamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketTeam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CricketTeamExists(ctx, tx, o.TeamID)
	if err != nil {
		t.Errorf("Unable to check if CricketTeam exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CricketTeamExists to return true, but got false.")
	}
}

func testCricketTeamsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketTeam{}
	if err = randomize.Struct(seed, o, cricketTeamDBTypes, true, cricketTeamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketTeam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	cricketTeamFound, err := FindCricketTeam(ctx, tx, o.TeamID)
	if err != nil {
		t.Error(err)
	}

	if cricketTeamFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCricketTeamsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketTeam{}
	if err = randomize.Struct(seed, o, cricketTeamDBTypes, true, cricketTeamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketTeam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CricketTeams().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCricketTeamsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketTeam{}
	if err = randomize.Struct(seed, o, cricketTeamDBTypes, true, cricketTeamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketTeam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CricketTeams().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCricketTeamsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cricketTeamOne := &CricketTeam{}
	cricketTeamTwo := &CricketTeam{}
	if err = randomize.Struct(seed, cricketTeamOne, cricketTeamDBTypes, false, cricketTeamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketTeam struct: %s", err)
	}
	if err = randomize.Struct(seed, cricketTeamTwo, cricketTeamDBTypes, false, cricketTeamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketTeam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = cricketTeamOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = cricketTeamTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CricketTeams().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCricketTeamsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	cricketTeamOne := &CricketTeam{}
	cricketTeamTwo := &CricketTeam{}
	if err = randomize.Struct(seed, cricketTeamOne, cricketTeamDBTypes, false, cricketTeamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketTeam struct: %s", err)
	}
	if err = randomize.Struct(seed, cricketTeamTwo, cricketTeamDBTypes, false, cricketTeamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketTeam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = cricketTeamOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = cricketTeamTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CricketTeams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func cricketTeamBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *CricketTeam) error {
	*o = CricketTeam{}
	return nil
}

func cricketTeamAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *CricketTeam) error {
	*o = CricketTeam{}
	return nil
}

func cricketTeamAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *CricketTeam) error {
	*o = CricketTeam{}
	return nil
}

func cricketTeamBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CricketTeam) error {
	*o = CricketTeam{}
	return nil
}

func cricketTeamAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CricketTeam) error {
	*o = CricketTeam{}
	return nil
}

func cricketTeamBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CricketTeam) error {
	*o = CricketTeam{}
	return nil
}

func cricketTeamAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CricketTeam) error {
	*o = CricketTeam{}
	return nil
}

func cricketTeamBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CricketTeam) error {
	*o = CricketTeam{}
	return nil
}

func cricketTeamAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CricketTeam) error {
	*o = CricketTeam{}
	return nil
}

func testCricketTeamsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &CricketTeam{}
	o := &CricketTeam{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, cricketTeamDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CricketTeam object: %s", err)
	}

	AddCricketTeamHook(boil.BeforeInsertHook, cricketTeamBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	cricketTeamBeforeInsertHooks = []CricketTeamHook{}

	AddCricketTeamHook(boil.AfterInsertHook, cricketTeamAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	cricketTeamAfterInsertHooks = []CricketTeamHook{}

	AddCricketTeamHook(boil.AfterSelectHook, cricketTeamAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	cricketTeamAfterSelectHooks = []CricketTeamHook{}

	AddCricketTeamHook(boil.BeforeUpdateHook, cricketTeamBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	cricketTeamBeforeUpdateHooks = []CricketTeamHook{}

	AddCricketTeamHook(boil.AfterUpdateHook, cricketTeamAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	cricketTeamAfterUpdateHooks = []CricketTeamHook{}

	AddCricketTeamHook(boil.BeforeDeleteHook, cricketTeamBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	cricketTeamBeforeDeleteHooks = []CricketTeamHook{}

	AddCricketTeamHook(boil.AfterDeleteHook, cricketTeamAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	cricketTeamAfterDeleteHooks = []CricketTeamHook{}

	AddCricketTeamHook(boil.BeforeUpsertHook, cricketTeamBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	cricketTeamBeforeUpsertHooks = []CricketTeamHook{}

	AddCricketTeamHook(boil.AfterUpsertHook, cricketTeamAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	cricketTeamAfterUpsertHooks = []CricketTeamHook{}
}

func testCricketTeamsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketTeam{}
	if err = randomize.Struct(seed, o, cricketTeamDBTypes, true, cricketTeamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketTeam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CricketTeams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCricketTeamsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketTeam{}
	if err = randomize.Struct(seed, o, cricketTeamDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CricketTeam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(cricketTeamColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CricketTeams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCricketTeamToManyTeamCricketPlayers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CricketTeam
	var b, c CricketPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cricketTeamDBTypes, true, cricketTeamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketTeam struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, cricketPlayerDBTypes, false, cricketPlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cricketPlayerDBTypes, false, cricketPlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TeamID = a.TeamID
	c.TeamID = a.TeamID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.TeamCricketPlayers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TeamID == b.TeamID {
			bFound = true
		}
		if v.TeamID == c.TeamID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CricketTeamSlice{&a}
	if err = a.L.LoadTeamCricketPlayers(ctx, tx, false, (*[]*CricketTeam)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TeamCricketPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TeamCricketPlayers = nil
	if err = a.L.LoadTeamCricketPlayers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TeamCricketPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCricketTeamToManyTeamGroundBookings(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CricketTeam
	var b, c GroundBooking

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cricketTeamDBTypes, true, cricketTeamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketTeam struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, groundBookingDBTypes, false, groundBookingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, groundBookingDBTypes, false, groundBookingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.TeamID, a.TeamID)
	queries.Assign(&c.TeamID, a.TeamID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.TeamGroundBookings().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.TeamID, b.TeamID) {
			bFound = true
		}
		if queries.Equal(v.TeamID, c.TeamID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CricketTeamSlice{&a}
	if err = a.L.LoadTeamGroundBookings(ctx, tx, false, (*[]*CricketTeam)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TeamGroundBookings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TeamGroundBookings = nil
	if err = a.L.LoadTeamGroundBookings(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TeamGroundBookings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCricketTeamToManyTeamTeamPlayers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CricketTeam
	var b, c TeamPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cricketTeamDBTypes, true, cricketTeamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketTeam struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, teamPlayerDBTypes, false, teamPlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teamPlayerDBTypes, false, teamPlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TeamID = a.TeamID
	c.TeamID = a.TeamID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.TeamTeamPlayers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TeamID == b.TeamID {
			bFound = true
		}
		if v.TeamID == c.TeamID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CricketTeamSlice{&a}
	if err = a.L.LoadTeamTeamPlayers(ctx, tx, false, (*[]*CricketTeam)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TeamTeamPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TeamTeamPlayers = nil
	if err = a.L.LoadTeamTeamPlayers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TeamTeamPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCricketTeamToManyAddOpTeamCricketPlayers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CricketTeam
	var b, c, d, e CricketPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cricketTeamDBTypes, false, strmangle.SetComplement(cricketTeamPrimaryKeyColumns, cricketTeamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CricketPlayer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cricketPlayerDBTypes, false, strmangle.SetComplement(cricketPlayerPrimaryKeyColumns, cricketPlayerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CricketPlayer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTeamCricketPlayers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.TeamID != first.TeamID {
			t.Error("foreign key was wrong value", a.TeamID, first.TeamID)
		}
		if a.TeamID != second.TeamID {
			t.Error("foreign key was wrong value", a.TeamID, second.TeamID)
		}

		if first.R.Team != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Team != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TeamCricketPlayers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TeamCricketPlayers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TeamCricketPlayers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCricketTeamToManyAddOpTeamGroundBookings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CricketTeam
	var b, c, d, e GroundBooking

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cricketTeamDBTypes, false, strmangle.SetComplement(cricketTeamPrimaryKeyColumns, cricketTeamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GroundBooking{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, groundBookingDBTypes, false, strmangle.SetComplement(groundBookingPrimaryKeyColumns, groundBookingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GroundBooking{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTeamGroundBookings(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.TeamID, first.TeamID) {
			t.Error("foreign key was wrong value", a.TeamID, first.TeamID)
		}
		if !queries.Equal(a.TeamID, second.TeamID) {
			t.Error("foreign key was wrong value", a.TeamID, second.TeamID)
		}

		if first.R.Team != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Team != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TeamGroundBookings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TeamGroundBookings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TeamGroundBookings().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCricketTeamToManySetOpTeamGroundBookings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CricketTeam
	var b, c, d, e GroundBooking

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cricketTeamDBTypes, false, strmangle.SetComplement(cricketTeamPrimaryKeyColumns, cricketTeamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GroundBooking{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, groundBookingDBTypes, false, strmangle.SetComplement(groundBookingPrimaryKeyColumns, groundBookingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetTeamGroundBookings(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.TeamGroundBookings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetTeamGroundBookings(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.TeamGroundBookings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TeamID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TeamID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.TeamID, d.TeamID) {
		t.Error("foreign key was wrong value", a.TeamID, d.TeamID)
	}
	if !queries.Equal(a.TeamID, e.TeamID) {
		t.Error("foreign key was wrong value", a.TeamID, e.TeamID)
	}

	if b.R.Team != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Team != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Team != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Team != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.TeamGroundBookings[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.TeamGroundBookings[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testCricketTeamToManyRemoveOpTeamGroundBookings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CricketTeam
	var b, c, d, e GroundBooking

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cricketTeamDBTypes, false, strmangle.SetComplement(cricketTeamPrimaryKeyColumns, cricketTeamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GroundBooking{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, groundBookingDBTypes, false, strmangle.SetComplement(groundBookingPrimaryKeyColumns, groundBookingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddTeamGroundBookings(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.TeamGroundBookings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveTeamGroundBookings(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.TeamGroundBookings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TeamID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TeamID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Team != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Team != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Team != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Team != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.TeamGroundBookings) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.TeamGroundBookings[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.TeamGroundBookings[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testCricketTeamToManyAddOpTeamTeamPlayers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CricketTeam
	var b, c, d, e TeamPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cricketTeamDBTypes, false, strmangle.SetComplement(cricketTeamPrimaryKeyColumns, cricketTeamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TeamPlayer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teamPlayerDBTypes, false, strmangle.SetComplement(teamPlayerPrimaryKeyColumns, teamPlayerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TeamPlayer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTeamTeamPlayers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.TeamID != first.TeamID {
			t.Error("foreign key was wrong value", a.TeamID, first.TeamID)
		}
		if a.TeamID != second.TeamID {
			t.Error("foreign key was wrong value", a.TeamID, second.TeamID)
		}

		if first.R.Team != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Team != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TeamTeamPlayers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TeamTeamPlayers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TeamTeamPlayers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCricketTeamsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketTeam{}
	if err = randomize.Struct(seed, o, cricketTeamDBTypes, true, cricketTeamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketTeam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCricketTeamsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketTeam{}
	if err = randomize.Struct(seed, o, cricketTeamDBTypes, true, cricketTeamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketTeam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CricketTeamSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCricketTeamsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CricketTeam{}
	if err = randomize.Struct(seed, o, cricketTeamDBTypes, true, cricketTeamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketTeam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CricketTeams().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	cricketTeamDBTypes = map[string]string{`TeamID`: `integer`, `TeamUUID`: `uuid`, `TeamName`: `character varying`, `TeamCountry`: `character varying`, `TeamState`: `character varying`, `TeamCity`: `character varying`, `CaptainID`: `integer`, `ViceCaptainID`: `integer`, `TeamCoachID`: `integer`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_                  = bytes.MinRead
)

func testCricketTeamsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(cricketTeamPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(cricketTeamAllColumns) == len(cricketTeamPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CricketTeam{}
	if err = randomize.Struct(seed, o, cricketTeamDBTypes, true, cricketTeamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketTeam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CricketTeams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, cricketTeamDBTypes, true, cricketTeamPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CricketTeam struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCricketTeamsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(cricketTeamAllColumns) == len(cricketTeamPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CricketTeam{}
	if err = randomize.Struct(seed, o, cricketTeamDBTypes, true, cricketTeamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CricketTeam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CricketTeams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, cricketTeamDBTypes, true, cricketTeamPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CricketTeam struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(cricketTeamAllColumns, cricketTeamPrimaryKeyColumns) {
		fields = cricketTeamAllColumns
	} else {
		fields = strmangle.SetComplement(
			cricketTeamAllColumns,
			cricketTeamPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CricketTeamSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCricketTeamsUpsert(t *testing.T) {
	t.Parallel()

	if len(cricketTeamAllColumns) == len(cricketTeamPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CricketTeam{}
	if err = randomize.Struct(seed, &o, cricketTeamDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CricketTeam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CricketTeam: %s", err)
	}

	count, err := CricketTeams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, cricketTeamDBTypes, false, cricketTeamPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CricketTeam struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CricketTeam: %s", err)
	}

	count, err = CricketTeams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
