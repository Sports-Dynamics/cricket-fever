// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("CricketPlayers", testCricketPlayers)
	t.Run("CricketTeams", testCricketTeams)
	t.Run("Migrations", testMigrations)
	t.Run("TeamPlayers", testTeamPlayers)
}

func TestDelete(t *testing.T) {
	t.Run("CricketPlayers", testCricketPlayersDelete)
	t.Run("CricketTeams", testCricketTeamsDelete)
	t.Run("Migrations", testMigrationsDelete)
	t.Run("TeamPlayers", testTeamPlayersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("CricketPlayers", testCricketPlayersQueryDeleteAll)
	t.Run("CricketTeams", testCricketTeamsQueryDeleteAll)
	t.Run("Migrations", testMigrationsQueryDeleteAll)
	t.Run("TeamPlayers", testTeamPlayersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("CricketPlayers", testCricketPlayersSliceDeleteAll)
	t.Run("CricketTeams", testCricketTeamsSliceDeleteAll)
	t.Run("Migrations", testMigrationsSliceDeleteAll)
	t.Run("TeamPlayers", testTeamPlayersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("CricketPlayers", testCricketPlayersExists)
	t.Run("CricketTeams", testCricketTeamsExists)
	t.Run("Migrations", testMigrationsExists)
	t.Run("TeamPlayers", testTeamPlayersExists)
}

func TestFind(t *testing.T) {
	t.Run("CricketPlayers", testCricketPlayersFind)
	t.Run("CricketTeams", testCricketTeamsFind)
	t.Run("Migrations", testMigrationsFind)
	t.Run("TeamPlayers", testTeamPlayersFind)
}

func TestBind(t *testing.T) {
	t.Run("CricketPlayers", testCricketPlayersBind)
	t.Run("CricketTeams", testCricketTeamsBind)
	t.Run("Migrations", testMigrationsBind)
	t.Run("TeamPlayers", testTeamPlayersBind)
}

func TestOne(t *testing.T) {
	t.Run("CricketPlayers", testCricketPlayersOne)
	t.Run("CricketTeams", testCricketTeamsOne)
	t.Run("Migrations", testMigrationsOne)
	t.Run("TeamPlayers", testTeamPlayersOne)
}

func TestAll(t *testing.T) {
	t.Run("CricketPlayers", testCricketPlayersAll)
	t.Run("CricketTeams", testCricketTeamsAll)
	t.Run("Migrations", testMigrationsAll)
	t.Run("TeamPlayers", testTeamPlayersAll)
}

func TestCount(t *testing.T) {
	t.Run("CricketPlayers", testCricketPlayersCount)
	t.Run("CricketTeams", testCricketTeamsCount)
	t.Run("Migrations", testMigrationsCount)
	t.Run("TeamPlayers", testTeamPlayersCount)
}

func TestHooks(t *testing.T) {
	t.Run("CricketPlayers", testCricketPlayersHooks)
	t.Run("CricketTeams", testCricketTeamsHooks)
	t.Run("Migrations", testMigrationsHooks)
	t.Run("TeamPlayers", testTeamPlayersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("CricketPlayers", testCricketPlayersInsert)
	t.Run("CricketPlayers", testCricketPlayersInsertWhitelist)
	t.Run("CricketTeams", testCricketTeamsInsert)
	t.Run("CricketTeams", testCricketTeamsInsertWhitelist)
	t.Run("Migrations", testMigrationsInsert)
	t.Run("Migrations", testMigrationsInsertWhitelist)
	t.Run("TeamPlayers", testTeamPlayersInsert)
	t.Run("TeamPlayers", testTeamPlayersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("TeamPlayerToCricketPlayerUsingPlayer", testTeamPlayerToOneCricketPlayerUsingPlayer)
	t.Run("TeamPlayerToCricketTeamUsingTeam", testTeamPlayerToOneCricketTeamUsingTeam)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("CricketPlayerToPlayerTeamPlayers", testCricketPlayerToManyPlayerTeamPlayers)
	t.Run("CricketTeamToTeamTeamPlayers", testCricketTeamToManyTeamTeamPlayers)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("TeamPlayerToCricketPlayerUsingPlayerTeamPlayers", testTeamPlayerToOneSetOpCricketPlayerUsingPlayer)
	t.Run("TeamPlayerToCricketTeamUsingTeamTeamPlayers", testTeamPlayerToOneSetOpCricketTeamUsingTeam)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("CricketPlayerToPlayerTeamPlayers", testCricketPlayerToManyAddOpPlayerTeamPlayers)
	t.Run("CricketTeamToTeamTeamPlayers", testCricketTeamToManyAddOpTeamTeamPlayers)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("CricketPlayers", testCricketPlayersReload)
	t.Run("CricketTeams", testCricketTeamsReload)
	t.Run("Migrations", testMigrationsReload)
	t.Run("TeamPlayers", testTeamPlayersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("CricketPlayers", testCricketPlayersReloadAll)
	t.Run("CricketTeams", testCricketTeamsReloadAll)
	t.Run("Migrations", testMigrationsReloadAll)
	t.Run("TeamPlayers", testTeamPlayersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("CricketPlayers", testCricketPlayersSelect)
	t.Run("CricketTeams", testCricketTeamsSelect)
	t.Run("Migrations", testMigrationsSelect)
	t.Run("TeamPlayers", testTeamPlayersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("CricketPlayers", testCricketPlayersUpdate)
	t.Run("CricketTeams", testCricketTeamsUpdate)
	t.Run("Migrations", testMigrationsUpdate)
	t.Run("TeamPlayers", testTeamPlayersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("CricketPlayers", testCricketPlayersSliceUpdateAll)
	t.Run("CricketTeams", testCricketTeamsSliceUpdateAll)
	t.Run("Migrations", testMigrationsSliceUpdateAll)
	t.Run("TeamPlayers", testTeamPlayersSliceUpdateAll)
}
