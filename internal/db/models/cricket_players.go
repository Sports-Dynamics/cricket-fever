// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CricketPlayer is an object representing the database table.
type CricketPlayer struct {
	PlayerID          int                     `boil:"player_id" json:"player_id" toml:"player_id" yaml:"player_id"`
	PlayerUUID        string                  `boil:"player_uuid" json:"player_uuid" toml:"player_uuid" yaml:"player_uuid"`
	PlayerName        string                  `boil:"player_name" json:"player_name" toml:"player_name" yaml:"player_name"`
	PlayerEmail       string                  `boil:"player_email" json:"player_email" toml:"player_email" yaml:"player_email"`
	PlayerMobile      int                     `boil:"player_mobile" json:"player_mobile" toml:"player_mobile" yaml:"player_mobile"`
	PlayerPicture     null.Bytes              `boil:"player_picture" json:"player_picture,omitempty" toml:"player_picture" yaml:"player_picture,omitempty"`
	PlayerRole        CricketRole             `boil:"player_role" json:"player_role" toml:"player_role" yaml:"player_role"`
	BattingPositions  CricketBattingPosition  `boil:"batting_positions" json:"batting_positions" toml:"batting_positions" yaml:"batting_positions"`
	BowlerTypes       CricketBowlerType       `boil:"bowler_types" json:"bowler_types" toml:"bowler_types" yaml:"bowler_types"`
	FieldingPositions CricketFieldingPosition `boil:"fielding_positions" json:"fielding_positions" toml:"fielding_positions" yaml:"fielding_positions"`

	R *cricketPlayerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cricketPlayerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CricketPlayerColumns = struct {
	PlayerID          string
	PlayerUUID        string
	PlayerName        string
	PlayerEmail       string
	PlayerMobile      string
	PlayerPicture     string
	PlayerRole        string
	BattingPositions  string
	BowlerTypes       string
	FieldingPositions string
}{
	PlayerID:          "player_id",
	PlayerUUID:        "player_uuid",
	PlayerName:        "player_name",
	PlayerEmail:       "player_email",
	PlayerMobile:      "player_mobile",
	PlayerPicture:     "player_picture",
	PlayerRole:        "player_role",
	BattingPositions:  "batting_positions",
	BowlerTypes:       "bowler_types",
	FieldingPositions: "fielding_positions",
}

var CricketPlayerTableColumns = struct {
	PlayerID          string
	PlayerUUID        string
	PlayerName        string
	PlayerEmail       string
	PlayerMobile      string
	PlayerPicture     string
	PlayerRole        string
	BattingPositions  string
	BowlerTypes       string
	FieldingPositions string
}{
	PlayerID:          "cricket_players.player_id",
	PlayerUUID:        "cricket_players.player_uuid",
	PlayerName:        "cricket_players.player_name",
	PlayerEmail:       "cricket_players.player_email",
	PlayerMobile:      "cricket_players.player_mobile",
	PlayerPicture:     "cricket_players.player_picture",
	PlayerRole:        "cricket_players.player_role",
	BattingPositions:  "cricket_players.batting_positions",
	BowlerTypes:       "cricket_players.bowler_types",
	FieldingPositions: "cricket_players.fielding_positions",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Bytes struct{ field string }

func (w whereHelpernull_Bytes) EQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bytes) NEQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bytes) LT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bytes) LTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bytes) GT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bytes) GTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bytes) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bytes) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperCricketRole struct{ field string }

func (w whereHelperCricketRole) EQ(x CricketRole) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperCricketRole) NEQ(x CricketRole) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperCricketRole) LT(x CricketRole) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperCricketRole) LTE(x CricketRole) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperCricketRole) GT(x CricketRole) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperCricketRole) GTE(x CricketRole) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperCricketRole) IN(slice []CricketRole) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperCricketRole) NIN(slice []CricketRole) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperCricketBattingPosition struct{ field string }

func (w whereHelperCricketBattingPosition) EQ(x CricketBattingPosition) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperCricketBattingPosition) NEQ(x CricketBattingPosition) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperCricketBattingPosition) LT(x CricketBattingPosition) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperCricketBattingPosition) LTE(x CricketBattingPosition) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperCricketBattingPosition) GT(x CricketBattingPosition) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperCricketBattingPosition) GTE(x CricketBattingPosition) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperCricketBattingPosition) IN(slice []CricketBattingPosition) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperCricketBattingPosition) NIN(slice []CricketBattingPosition) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperCricketBowlerType struct{ field string }

func (w whereHelperCricketBowlerType) EQ(x CricketBowlerType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperCricketBowlerType) NEQ(x CricketBowlerType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperCricketBowlerType) LT(x CricketBowlerType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperCricketBowlerType) LTE(x CricketBowlerType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperCricketBowlerType) GT(x CricketBowlerType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperCricketBowlerType) GTE(x CricketBowlerType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperCricketBowlerType) IN(slice []CricketBowlerType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperCricketBowlerType) NIN(slice []CricketBowlerType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperCricketFieldingPosition struct{ field string }

func (w whereHelperCricketFieldingPosition) EQ(x CricketFieldingPosition) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperCricketFieldingPosition) NEQ(x CricketFieldingPosition) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperCricketFieldingPosition) LT(x CricketFieldingPosition) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperCricketFieldingPosition) LTE(x CricketFieldingPosition) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperCricketFieldingPosition) GT(x CricketFieldingPosition) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperCricketFieldingPosition) GTE(x CricketFieldingPosition) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperCricketFieldingPosition) IN(slice []CricketFieldingPosition) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperCricketFieldingPosition) NIN(slice []CricketFieldingPosition) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var CricketPlayerWhere = struct {
	PlayerID          whereHelperint
	PlayerUUID        whereHelperstring
	PlayerName        whereHelperstring
	PlayerEmail       whereHelperstring
	PlayerMobile      whereHelperint
	PlayerPicture     whereHelpernull_Bytes
	PlayerRole        whereHelperCricketRole
	BattingPositions  whereHelperCricketBattingPosition
	BowlerTypes       whereHelperCricketBowlerType
	FieldingPositions whereHelperCricketFieldingPosition
}{
	PlayerID:          whereHelperint{field: "\"cricket_players\".\"player_id\""},
	PlayerUUID:        whereHelperstring{field: "\"cricket_players\".\"player_uuid\""},
	PlayerName:        whereHelperstring{field: "\"cricket_players\".\"player_name\""},
	PlayerEmail:       whereHelperstring{field: "\"cricket_players\".\"player_email\""},
	PlayerMobile:      whereHelperint{field: "\"cricket_players\".\"player_mobile\""},
	PlayerPicture:     whereHelpernull_Bytes{field: "\"cricket_players\".\"player_picture\""},
	PlayerRole:        whereHelperCricketRole{field: "\"cricket_players\".\"player_role\""},
	BattingPositions:  whereHelperCricketBattingPosition{field: "\"cricket_players\".\"batting_positions\""},
	BowlerTypes:       whereHelperCricketBowlerType{field: "\"cricket_players\".\"bowler_types\""},
	FieldingPositions: whereHelperCricketFieldingPosition{field: "\"cricket_players\".\"fielding_positions\""},
}

// CricketPlayerRels is where relationship names are stored.
var CricketPlayerRels = struct {
	PlayerTeamPlayers string
}{
	PlayerTeamPlayers: "PlayerTeamPlayers",
}

// cricketPlayerR is where relationships are stored.
type cricketPlayerR struct {
	PlayerTeamPlayers TeamPlayerSlice `boil:"PlayerTeamPlayers" json:"PlayerTeamPlayers" toml:"PlayerTeamPlayers" yaml:"PlayerTeamPlayers"`
}

// NewStruct creates a new relationship struct
func (*cricketPlayerR) NewStruct() *cricketPlayerR {
	return &cricketPlayerR{}
}

func (r *cricketPlayerR) GetPlayerTeamPlayers() TeamPlayerSlice {
	if r == nil {
		return nil
	}
	return r.PlayerTeamPlayers
}

// cricketPlayerL is where Load methods for each relationship are stored.
type cricketPlayerL struct{}

var (
	cricketPlayerAllColumns            = []string{"player_id", "player_uuid", "player_name", "player_email", "player_mobile", "player_picture", "player_role", "batting_positions", "bowler_types", "fielding_positions"}
	cricketPlayerColumnsWithoutDefault = []string{"player_uuid", "player_name", "player_email", "player_mobile", "player_role", "batting_positions", "bowler_types", "fielding_positions"}
	cricketPlayerColumnsWithDefault    = []string{"player_id", "player_picture"}
	cricketPlayerPrimaryKeyColumns     = []string{"player_id"}
	cricketPlayerGeneratedColumns      = []string{}
)

type (
	// CricketPlayerSlice is an alias for a slice of pointers to CricketPlayer.
	// This should almost always be used instead of []CricketPlayer.
	CricketPlayerSlice []*CricketPlayer
	// CricketPlayerHook is the signature for custom CricketPlayer hook methods
	CricketPlayerHook func(context.Context, boil.ContextExecutor, *CricketPlayer) error

	cricketPlayerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cricketPlayerType                 = reflect.TypeOf(&CricketPlayer{})
	cricketPlayerMapping              = queries.MakeStructMapping(cricketPlayerType)
	cricketPlayerPrimaryKeyMapping, _ = queries.BindMapping(cricketPlayerType, cricketPlayerMapping, cricketPlayerPrimaryKeyColumns)
	cricketPlayerInsertCacheMut       sync.RWMutex
	cricketPlayerInsertCache          = make(map[string]insertCache)
	cricketPlayerUpdateCacheMut       sync.RWMutex
	cricketPlayerUpdateCache          = make(map[string]updateCache)
	cricketPlayerUpsertCacheMut       sync.RWMutex
	cricketPlayerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cricketPlayerAfterSelectHooks []CricketPlayerHook

var cricketPlayerBeforeInsertHooks []CricketPlayerHook
var cricketPlayerAfterInsertHooks []CricketPlayerHook

var cricketPlayerBeforeUpdateHooks []CricketPlayerHook
var cricketPlayerAfterUpdateHooks []CricketPlayerHook

var cricketPlayerBeforeDeleteHooks []CricketPlayerHook
var cricketPlayerAfterDeleteHooks []CricketPlayerHook

var cricketPlayerBeforeUpsertHooks []CricketPlayerHook
var cricketPlayerAfterUpsertHooks []CricketPlayerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CricketPlayer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cricketPlayerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CricketPlayer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cricketPlayerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CricketPlayer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cricketPlayerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CricketPlayer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cricketPlayerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CricketPlayer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cricketPlayerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CricketPlayer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cricketPlayerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CricketPlayer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cricketPlayerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CricketPlayer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cricketPlayerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CricketPlayer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cricketPlayerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCricketPlayerHook registers your hook function for all future operations.
func AddCricketPlayerHook(hookPoint boil.HookPoint, cricketPlayerHook CricketPlayerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		cricketPlayerAfterSelectHooks = append(cricketPlayerAfterSelectHooks, cricketPlayerHook)
	case boil.BeforeInsertHook:
		cricketPlayerBeforeInsertHooks = append(cricketPlayerBeforeInsertHooks, cricketPlayerHook)
	case boil.AfterInsertHook:
		cricketPlayerAfterInsertHooks = append(cricketPlayerAfterInsertHooks, cricketPlayerHook)
	case boil.BeforeUpdateHook:
		cricketPlayerBeforeUpdateHooks = append(cricketPlayerBeforeUpdateHooks, cricketPlayerHook)
	case boil.AfterUpdateHook:
		cricketPlayerAfterUpdateHooks = append(cricketPlayerAfterUpdateHooks, cricketPlayerHook)
	case boil.BeforeDeleteHook:
		cricketPlayerBeforeDeleteHooks = append(cricketPlayerBeforeDeleteHooks, cricketPlayerHook)
	case boil.AfterDeleteHook:
		cricketPlayerAfterDeleteHooks = append(cricketPlayerAfterDeleteHooks, cricketPlayerHook)
	case boil.BeforeUpsertHook:
		cricketPlayerBeforeUpsertHooks = append(cricketPlayerBeforeUpsertHooks, cricketPlayerHook)
	case boil.AfterUpsertHook:
		cricketPlayerAfterUpsertHooks = append(cricketPlayerAfterUpsertHooks, cricketPlayerHook)
	}
}

// OneG returns a single cricketPlayer record from the query using the global executor.
func (q cricketPlayerQuery) OneG(ctx context.Context) (*CricketPlayer, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single cricketPlayer record from the query.
func (q cricketPlayerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CricketPlayer, error) {
	o := &CricketPlayer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cricket_players")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all CricketPlayer records from the query using the global executor.
func (q cricketPlayerQuery) AllG(ctx context.Context) (CricketPlayerSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all CricketPlayer records from the query.
func (q cricketPlayerQuery) All(ctx context.Context, exec boil.ContextExecutor) (CricketPlayerSlice, error) {
	var o []*CricketPlayer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CricketPlayer slice")
	}

	if len(cricketPlayerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all CricketPlayer records in the query using the global executor
func (q cricketPlayerQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all CricketPlayer records in the query.
func (q cricketPlayerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cricket_players rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q cricketPlayerQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q cricketPlayerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cricket_players exists")
	}

	return count > 0, nil
}

// PlayerTeamPlayers retrieves all the team_player's TeamPlayers with an executor via player_id column.
func (o *CricketPlayer) PlayerTeamPlayers(mods ...qm.QueryMod) teamPlayerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"team_players\".\"player_id\"=?", o.PlayerID),
	)

	return TeamPlayers(queryMods...)
}

// LoadPlayerTeamPlayers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (cricketPlayerL) LoadPlayerTeamPlayers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCricketPlayer interface{}, mods queries.Applicator) error {
	var slice []*CricketPlayer
	var object *CricketPlayer

	if singular {
		var ok bool
		object, ok = maybeCricketPlayer.(*CricketPlayer)
		if !ok {
			object = new(CricketPlayer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCricketPlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCricketPlayer))
			}
		}
	} else {
		s, ok := maybeCricketPlayer.(*[]*CricketPlayer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCricketPlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCricketPlayer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cricketPlayerR{}
		}
		args = append(args, object.PlayerID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cricketPlayerR{}
			}

			for _, a := range args {
				if a == obj.PlayerID {
					continue Outer
				}
			}

			args = append(args, obj.PlayerID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`team_players`),
		qm.WhereIn(`team_players.player_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load team_players")
	}

	var resultSlice []*TeamPlayer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice team_players")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on team_players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for team_players")
	}

	if len(teamPlayerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PlayerTeamPlayers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &teamPlayerR{}
			}
			foreign.R.Player = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PlayerID == foreign.PlayerID {
				local.R.PlayerTeamPlayers = append(local.R.PlayerTeamPlayers, foreign)
				if foreign.R == nil {
					foreign.R = &teamPlayerR{}
				}
				foreign.R.Player = local
				break
			}
		}
	}

	return nil
}

// AddPlayerTeamPlayersG adds the given related objects to the existing relationships
// of the cricket_player, optionally inserting them as new records.
// Appends related to o.R.PlayerTeamPlayers.
// Sets related.R.Player appropriately.
// Uses the global database handle.
func (o *CricketPlayer) AddPlayerTeamPlayersG(ctx context.Context, insert bool, related ...*TeamPlayer) error {
	return o.AddPlayerTeamPlayers(ctx, boil.GetContextDB(), insert, related...)
}

// AddPlayerTeamPlayers adds the given related objects to the existing relationships
// of the cricket_player, optionally inserting them as new records.
// Appends related to o.R.PlayerTeamPlayers.
// Sets related.R.Player appropriately.
func (o *CricketPlayer) AddPlayerTeamPlayers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TeamPlayer) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PlayerID = o.PlayerID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"team_players\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
				strmangle.WhereClause("\"", "\"", 2, teamPlayerPrimaryKeyColumns),
			)
			values := []interface{}{o.PlayerID, rel.PlayerID, rel.TeamID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PlayerID = o.PlayerID
		}
	}

	if o.R == nil {
		o.R = &cricketPlayerR{
			PlayerTeamPlayers: related,
		}
	} else {
		o.R.PlayerTeamPlayers = append(o.R.PlayerTeamPlayers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &teamPlayerR{
				Player: o,
			}
		} else {
			rel.R.Player = o
		}
	}
	return nil
}

// CricketPlayers retrieves all the records using an executor.
func CricketPlayers(mods ...qm.QueryMod) cricketPlayerQuery {
	mods = append(mods, qm.From("\"cricket_players\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"cricket_players\".*"})
	}

	return cricketPlayerQuery{q}
}

// FindCricketPlayerG retrieves a single record by ID.
func FindCricketPlayerG(ctx context.Context, playerID int, selectCols ...string) (*CricketPlayer, error) {
	return FindCricketPlayer(ctx, boil.GetContextDB(), playerID, selectCols...)
}

// FindCricketPlayer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCricketPlayer(ctx context.Context, exec boil.ContextExecutor, playerID int, selectCols ...string) (*CricketPlayer, error) {
	cricketPlayerObj := &CricketPlayer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"cricket_players\" where \"player_id\"=$1", sel,
	)

	q := queries.Raw(query, playerID)

	err := q.Bind(ctx, exec, cricketPlayerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cricket_players")
	}

	if err = cricketPlayerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return cricketPlayerObj, err
	}

	return cricketPlayerObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CricketPlayer) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CricketPlayer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cricket_players provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cricketPlayerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cricketPlayerInsertCacheMut.RLock()
	cache, cached := cricketPlayerInsertCache[key]
	cricketPlayerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cricketPlayerAllColumns,
			cricketPlayerColumnsWithDefault,
			cricketPlayerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cricketPlayerType, cricketPlayerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cricketPlayerType, cricketPlayerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"cricket_players\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"cricket_players\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cricket_players")
	}

	if !cached {
		cricketPlayerInsertCacheMut.Lock()
		cricketPlayerInsertCache[key] = cache
		cricketPlayerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single CricketPlayer record using the global executor.
// See Update for more documentation.
func (o *CricketPlayer) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the CricketPlayer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CricketPlayer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cricketPlayerUpdateCacheMut.RLock()
	cache, cached := cricketPlayerUpdateCache[key]
	cricketPlayerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cricketPlayerAllColumns,
			cricketPlayerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cricket_players, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"cricket_players\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, cricketPlayerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cricketPlayerType, cricketPlayerMapping, append(wl, cricketPlayerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cricket_players row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cricket_players")
	}

	if !cached {
		cricketPlayerUpdateCacheMut.Lock()
		cricketPlayerUpdateCache[key] = cache
		cricketPlayerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q cricketPlayerQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q cricketPlayerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cricket_players")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cricket_players")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CricketPlayerSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CricketPlayerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cricketPlayerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"cricket_players\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, cricketPlayerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cricketPlayer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cricketPlayer")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CricketPlayer) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CricketPlayer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cricket_players provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cricketPlayerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cricketPlayerUpsertCacheMut.RLock()
	cache, cached := cricketPlayerUpsertCache[key]
	cricketPlayerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cricketPlayerAllColumns,
			cricketPlayerColumnsWithDefault,
			cricketPlayerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			cricketPlayerAllColumns,
			cricketPlayerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert cricket_players, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(cricketPlayerPrimaryKeyColumns))
			copy(conflict, cricketPlayerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"cricket_players\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(cricketPlayerType, cricketPlayerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cricketPlayerType, cricketPlayerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert cricket_players")
	}

	if !cached {
		cricketPlayerUpsertCacheMut.Lock()
		cricketPlayerUpsertCache[key] = cache
		cricketPlayerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single CricketPlayer record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CricketPlayer) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single CricketPlayer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CricketPlayer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CricketPlayer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cricketPlayerPrimaryKeyMapping)
	sql := "DELETE FROM \"cricket_players\" WHERE \"player_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cricket_players")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cricket_players")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q cricketPlayerQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q cricketPlayerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cricketPlayerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cricket_players")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cricket_players")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CricketPlayerSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CricketPlayerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cricketPlayerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cricketPlayerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"cricket_players\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cricketPlayerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cricketPlayer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cricket_players")
	}

	if len(cricketPlayerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CricketPlayer) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no CricketPlayer provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CricketPlayer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCricketPlayer(ctx, exec, o.PlayerID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CricketPlayerSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty CricketPlayerSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CricketPlayerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CricketPlayerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cricketPlayerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"cricket_players\".* FROM \"cricket_players\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cricketPlayerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CricketPlayerSlice")
	}

	*o = slice

	return nil
}

// CricketPlayerExistsG checks if the CricketPlayer row exists.
func CricketPlayerExistsG(ctx context.Context, playerID int) (bool, error) {
	return CricketPlayerExists(ctx, boil.GetContextDB(), playerID)
}

// CricketPlayerExists checks if the CricketPlayer row exists.
func CricketPlayerExists(ctx context.Context, exec boil.ContextExecutor, playerID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"cricket_players\" where \"player_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, playerID)
	}
	row := exec.QueryRowContext(ctx, sql, playerID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cricket_players exists")
	}

	return exists, nil
}

// Exists checks if the CricketPlayer row exists.
func (o *CricketPlayer) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CricketPlayerExists(ctx, exec, o.PlayerID)
}
